<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[block]]></title>
      <url>http://chenxiao90.com/2016/08/30/block/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="（一）简介"><a href="#（一）简介" class="headerlink" title="（一）简介"></a>（一）简介</h2><ul>
<li>block用来封装一段代码，可以在任何时候执行</li>
<li>block的标志：^</li>
<li>block跟函数很像：<br> 1&gt; 都有返回值<br> 2&gt; 都可以保存代码<br> 3&gt; 有形参<br> 4&gt; 调用方法一样</li>
<li>block和函数的区别：<br> 1&gt; 函数只能在方法外面定义<br> 2&gt; block可以定义在方法内，也可以定义在方法外</li>
</ul>
<h2 id="（二）block定义"><a href="#（二）block定义" class="headerlink" title="（二）block定义:"></a>（二）block定义:</h2><h4 id="1-没有返回值、没有形参，可以省略后面形参的括号"><a href="#1-没有返回值、没有形参，可以省略后面形参的括号" class="headerlink" title="1.没有返回值、没有形参，可以省略后面形参的括号"></a><strong>1.没有返回值、没有形参，可以省略后面形参的括号</strong></h4><p>void (^block变量名)() = ^{</p>
<p>}<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (^myBlock)() = ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"----------"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-无返回值、有参数的"><a href="#2-无返回值、有参数的" class="headerlink" title="2.无返回值、有参数的"></a><strong>2.无返回值、有参数的</strong></h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (^myBlock)(<span class="keyword">int</span>) = ^(<span class="keyword">int</span> a)&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"你传入的是%d"</span>,a);</div><div class="line">&#125;;</div><div class="line">myBlock(<span class="number">3</span>);</div></pre></td></tr></table></figure>
<h4 id="3-有返回值、有形参传入"><a href="#3-有返回值、有形参传入" class="headerlink" title="3.有返回值、有形参传入"></a><strong>3.有返回值、有形参传入</strong></h4><p>返回值类型 (^block变量名)(形参类型) = ^(形参名)<br>{<br>​<br>}<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (^sumBlock)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-block的调用"><a href="#3-block的调用" class="headerlink" title="3.block的调用"></a><strong>3.block的调用</strong></h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sumBlock()<span class="comment">;</span></div><div class="line">myBlock()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="（三）block访问外部变量"><a href="#（三）block访问外部变量" class="headerlink" title="（三）block访问外部变量"></a>（三）block访问外部变量</h2><p>1.block内部可以访问外部的变量<br>2.默认情况下，block内部不能修改外部变量<br>3.给局部变量加上__block关键字，这个局部变量就可以在block内部修改<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> a = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    __block <span class="built_in">int</span> b = <span class="number">14</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">void</span> (^<span class="keyword">block</span>)() = ^&#123;</div><div class="line">        //<span class="keyword">block</span>内部可以访问外部变量</div><div class="line">        <span class="type">NSLog</span>(@<span class="string">"a=%d"</span>, a);</div><div class="line">        //给局部变量加上__block关键字，就可以在<span class="keyword">block</span>内部修改</div><div class="line">        b = <span class="number">24</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">block</span>();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="（四）利用typedef定义block类型"><a href="#（四）利用typedef定义block类型" class="headerlink" title="（四）利用typedef定义block类型"></a>（四）利用typedef定义block类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (^sumBlock)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> (^minusBlock)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上block的定义非常相似，每次写起来比较麻烦，可以用typedef定义一个通用的block类型<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(^myBlock)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<p>然后用myBlock这种类型定义block变量<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">myBlock sumBlock = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myBlock minusBlock = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一章、熟悉Objective-C]]></title>
      <url>http://chenxiao90.com/2016/08/30/%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%81%E7%86%9F%E6%82%89Objective-C/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h4 id="第1条：了解Objective-C语言的起源"><a href="#第1条：了解Objective-C语言的起源" class="headerlink" title="第1条：了解Objective-C语言的起源"></a>第1条：了解Objective-C语言的起源</h4><ol>
<li>Objective-C是使用<code>消息结构</code>的语言，其运行时所应执行的代码由运行环境决定；而使用’函数调用’的语言，如C++/Java，则由编译器决定</li>
<li>OC对象所占内存分配在堆中，而指针变量分配在栈上；分配在堆中的内存必须直接管理，分配在栈上的内存则会在栈帧弹出时自动清理</li>
<li>Objective-C使用<code>动态绑定(dynamic binding)</code>的消息结构，也就是在运行时才会检查对象类型。接收一条消息之后，究竟应执行何种代码，由运行期环境而非编译器来决定</li>
</ol>
<h4 id="第2条：在类的头文件中尽量少引入其他头文件"><a href="#第2条：在类的头文件中尽量少引入其他头文件" class="headerlink" title="第2条：在类的头文件中尽量少引入其他头文件"></a>第2条：在类的头文件中尽量少引入其他头文件</h4><ol>
<li>在编译一个使用了某个类的头文件时，不需要知道这个类的全部细节，只需要知道有这个类名就好，所以应该使用<code>向前声明(forward declaring)-@class</code>；如果引入许多根本用不到的内容，就会增加编译时间</li>
<li>向前声明也解决了两个类互相引用的问题：如果两个类在各自头文件中都引入了对方的头文件，就回导致“循环引用(chicken-and-egg situation)”</li>
<li>有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下应该把协议放到类扩展中</li>
</ol>
<h4 id="第3条：多用字面量语法，少用与之等价的方法"><a href="#第3条：多用字面量语法，少用与之等价的方法" class="headerlink" title="第3条：多用字面量语法，少用与之等价的方法"></a>第3条：多用字面量语法，少用与之等价的方法</h4><ol>
<li>字面量字符串：<code>NSString *str = @&quot;Effective Objective-C 2.0&quot;;</code></li>
<li>字面量数值：<code>NSNumber *num = @1;</code></li>
<li>字面量数组：<code>NSArray *animals = @[@&quot;cat&quot;, @&quot;dog&quot;, @&quot;mouse&quot;];</code>;取下标(subscripting)操作：<code>NSString *dog = animals[1];</code></li>
<li>字面量字典：<code>NSDictionary *dic = @{@&quot;firstName&quot; : @&quot;Matt&quot;, @&quot;lastName&quot; : @&quot;Gall&quot;, @&quot;age&quot; : @28};</code></li>
<li>使用字面量数组的注意点：如果数组元素中有nil，就回抛出异常，因为字面量语法实际上只是一种“语法糖(syntactic sugar)”；<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *a1 = @[<span class="built_in">NSArray</span> arrayWithObjects:obj1, obj2, obj3, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSArray</span> *a2 = @[obj1, obj2, obj3];</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>如果obj1和obj3都有效而obj2是nil，那么用字面量语法创建数组a2时会抛出异常。a1虽然能创建出来，但是其中只含有obj1一个对象，原因在于“arrayWithObjects:”会依次处理各个参数，直到发现nil为止，所以该方法会提前结束。这表明，使用字面量语法更为安全。</li>
<li>注：语法糖-是指计算机语言中与另外一套语法等效但是开发者用起来更方便的语法。语法糖可令程序更易读，减少代码出错几率</li>
</ul>
<ol>
<li>可变数组与字典​</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mutableArray[<span class="number">1</span>] = <span class="string">@"dog"</span>;</div><div class="line">mutableDictionary[<span class="string">@"lastName"</span>] = <span class="string">@"Gall"</span>;</div></pre></td></tr></table></figure>
<ol>
<li>所以应该使用字面量语法来创建紫都城、数值、数组、字典，这么做更加简明扼要；应该通过取下标操作来访问数组或字典中的键所对应的元素</li>
</ol>
<h4 id="第4条：多用类型常量，少用-define预处理指令"><a href="#第4条：多用类型常量，少用-define预处理指令" class="headerlink" title="第4条：多用类型常量，少用#define预处理指令"></a>第4条：多用类型常量，少用#define预处理指令</h4><ol>
<li>不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换工作。即使有人重新定义了常量值，编译器也不会产生警告，这将导致程序中的常量值不一致</li>
<li><p>在实现文件中用<code>static const</code>来定义只在实现文件中可见的常量，通常在常量名前加k；const保证所声明的常量不能被修改</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">statci <span class="keyword">const</span> <span class="built_in">NSTimerInterval</span> kAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>在头文件中使用<code>extern</code>来声明全局常量，并在实现文件中定义其值，常量名通常用与之相关的类名做前缀</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.h</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant;</div><div class="line"><span class="comment">//.m</span></div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@"VALUE"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="第5条：用枚举表示状态、选项、状态码"><a href="#第5条：用枚举表示状态、选项、状态码" class="headerlink" title="第5条：用枚举表示状态、选项、状态码"></a>第5条：用枚举表示状态、选项、状态码</h4><h5 id="本章关键词"><a href="#本章关键词" class="headerlink" title="本章关键词"></a>本章关键词</h5><ul>
<li>消息结构：messaging structure</li>
<li>函数调用：function calling</li>
<li>动态绑定：dynamic binding</li>
<li>运行期组件：runtime component</li>
<li>动态库：dynamic library</li>
<li>编译期：compile time</li>
<li>超集：superset</li>
<li>内存模型：memory model</li>
<li>引用计数：reference counting</li>
<li>栈帧：stack frame</li>
<li>循环引用：chicken-and-egg situation</li>
<li>字符串字面量：string literal</li>
<li>字面量语法：literal syntax</li>
<li>取下标：subscripting</li>
<li>语法糖：syntactic sugar</li>
<li>命名习惯：naming convention</li>
<li>全局符号表：global symbol table</li>
<li>底层数据类型：underlying type</li>
<li>按位或操作符：bitwise OR operator</li>
<li>按位与操作符：bitwise AND operator</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://chenxiao90.com/2016/08/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
