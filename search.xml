<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[（三）应用数据存储之CoreData]]></title>
      <url>http://chenxiao90.com/2016/09/11/%EF%BC%88%E4%B8%89%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BCoreData/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>Core Data是一个系统框架，它提供了对象-关系映射(ORM)的功能，既能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存在数据库中的数据还原成OC对象。在此数据操作期间，我们不需要编写任何SQL语句</li>
<li>使用Core Data需要添加CoreData.framework并导入头文件CoreData/CoreData.h</li>
</ul>
<h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><h3 id="（一）创建模型文件"><a href="#（一）创建模型文件" class="headerlink" title="（一）创建模型文件"></a>（一）创建模型文件</h3><ul>
<li>一个模型文件就相当于一个数据库</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/006y8lVajw1f7puywbu2jj30l80fc0u1.jpg" alt=""></p>
<h3 id="（二）添加实体"><a href="#（二）添加实体" class="headerlink" title="（二）添加实体"></a>（二）添加实体</h3><ul>
<li>在Core Data中，需要进行映射的对象称为实体(netity)，而且需要使用Core Data的模型文件来描述应用的所有实体和实体</li>
<li>实体就相当于表</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/006y8lVajw1f7pv3z3ft6j30qb0qjdim.jpg" alt=""></p>
<h3 id="（三）创建实体类"><a href="#（三）创建实体类" class="headerlink" title="（三）创建实体类"></a>（三）创建实体类</h3><ul>
<li>实体类相当于模型类</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVajw1f7pv772uv0j30l80fcmyh.jpg" alt=""></p>
<h3 id="（四）代码实现相关操作"><a href="#（四）代码实现相关操作" class="headerlink" title="（四）代码实现相关操作"></a>（四）代码实现相关操作</h3><p><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f7q1qlpw8tj20m90gvjta.jpg" alt="CoreData的主要对象"></p>
<p><strong>（1）生成上下文，关联.xcdatamodeld模型文件</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">//1.生成上下文(数据操作必须使用上下文)</span></div><div class="line">    <span class="built_in">NSManagedObjectContext</span> *context = [[<span class="built_in">NSManagedObjectContext</span> alloc] initWithConcurrencyType:<span class="built_in">NSMainQueueConcurrencyType</span>];</div><div class="line">    <span class="comment">//2.关联模型文件</span></div><div class="line">    <span class="comment">//2.2创建模型对象</span></div><div class="line">    <span class="comment">//传一个nil 会把bundle下的所有模型文件关联起来</span></div><div class="line">    <span class="built_in">NSManagedObjectModel</span> *model = [<span class="built_in">NSManagedObjectModel</span> mergedModelFromBundles:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">//2.1设置上下文的持久存储器</span></div><div class="line">    <span class="built_in">NSPersistentStoreCoordinator</span> *store = [[<span class="built_in">NSPersistentStoreCoordinator</span> alloc] initWithManagedObjectModel:model];</div><div class="line">    <span class="comment">//2.3设置数据库保存的全路径</span></div><div class="line">    <span class="built_in">NSString</span> *doc = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">    <span class="built_in">NSString</span> *filePath = [doc stringByAppendingPathComponent:<span class="string">@"company.sqlite"</span>];</div><div class="line">    <span class="comment">//参数1：数据库存储类型</span></div><div class="line">    <span class="comment">//URL：存放路径</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    [store addPersistentStoreWithType:<span class="built_in">NSSQLiteStoreType</span> configuration:<span class="literal">nil</span> URL:[<span class="built_in">NSURL</span> fileURLWithPath:filePath] options:<span class="literal">nil</span> error:&amp;error];</div><div class="line">    </div><div class="line">    context.persistentStoreCoordinator = store;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"存储器创建失败"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"存储器创建成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>基本步骤：生成上下文-&gt;设置上下文的持久存储器-&gt;创建持久存储器-&gt;创建模型对象-&gt;设置存储器的存放路径</li>
</ul>
<p><strong>（2）添加信息</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)addEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.创建员工</span></div><div class="line">    Employee *emp1 = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Employee"</span> inManagedObjectContext:<span class="keyword">self</span>.context];</div><div class="line">    <span class="comment">//2.设置员工属性</span></div><div class="line">    emp1.name = <span class="string">@"zhangsan"</span>;</div><div class="line">    emp1.age = @<span class="number">30</span>;</div><div class="line">    emp1.height = @<span class="number">1.90</span>;</div><div class="line">    <span class="comment">//3.保存，通过上下文操作</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.context save:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存信息成功"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>NSEntityDescription</code>的<code>insertNewObjectForEntityForName:inManagedObjectContext:</code>方法创建实体</li>
<li>使用上下文保存信息<code>[self.context save:&amp;error];</code></li>
</ul>
<p><strong>（3）修改信息</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)updateEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//把zhangsan的身高改成1.89</span></div><div class="line">    <span class="comment">//1.查找员工</span></div><div class="line">    <span class="comment">//1.1发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    <span class="comment">//1.2添加过滤</span></div><div class="line">    <span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"name=%@"</span>, <span class="string">@"zhangsan"</span>];</div><div class="line">    request.predicate = pre;</div><div class="line">    <span class="comment">//1.3返回查找结果(数组)</span></div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">//2.修改</span></div><div class="line">    <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">        emp.height = @<span class="number">1.89</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.同步到数据</span></div><div class="line">    <span class="comment">//所有操作都是暂存在内存中，需要调用save同步数据库</span></div><div class="line">    [<span class="keyword">self</span>.context save:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（4）删除信息</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)deleteEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.查找员工</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    <span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"name=%@"</span>, <span class="string">@"zhangsan"</span>];</div><div class="line">    request.predicate = pre;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">//2.删除</span></div><div class="line">    <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">        [<span class="keyword">self</span>.context deleteObject:emp];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.同步</span></div><div class="line">    [<span class="keyword">self</span>.context save:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改、删除、查询操作时，返回的结果都要用<code>NSArray *array = [self.context executeFetchRequest:request error:nil];</code></li>
</ul>
<p><strong>（5）查询信息</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)selectEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    <span class="comment">//2.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, emp.name, emp.age, emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1）过滤查询<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)selectEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//过滤查询</span></div><div class="line">    <span class="comment">//查找张三并且身高大于2.0</span></div><div class="line">    <span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"name = %@ AND height &gt; %@"</span>, <span class="string">@"zhangsan"</span>, @(<span class="number">2.0</span>)];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    <span class="comment">//2.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, emp.name, emp.age, emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2）排序<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)selectEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//过滤查询</span></div><div class="line">    <span class="comment">//排序-以身高进行升序</span></div><div class="line">    <span class="built_in">NSSortDescriptor</span> *sort = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"height"</span> ascending:<span class="literal">YES</span>];</div><div class="line">    request.sortDescriptors = @[sort];</div><div class="line">    </div><div class="line">    <span class="comment">//2.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, emp.name, emp.age, emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3）分页查询<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)selectEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//过滤查询</span></div><div class="line">    <span class="comment">//分页查询-每页显示5条数据</span></div><div class="line">    <span class="comment">//第一页的数据</span></div><div class="line">    request.fetchLimit = <span class="number">5</span>;</div><div class="line">    request.fetchOffset = <span class="number">0</span>;<span class="comment">//从第几条开始显示</span></div><div class="line">    </div><div class="line">    <span class="comment">//2.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, emp.name, emp.age, emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4）模糊查询<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)likeSearch:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//1.发送请求</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    <span class="comment">//2.过滤</span></div><div class="line">    <span class="comment">//2.1 查询以wang开头的员工</span></div><div class="line"><span class="comment">//    NSPredicate *pre = [NSPredicate predicateWithFormat:@"name BEGINSWITH %@", @"wang"];</span></div><div class="line"><span class="comment">//    request.predicate = pre;</span></div><div class="line">    </div><div class="line">    <span class="comment">//2.2 查询以san结尾的员工</span></div><div class="line"><span class="comment">//    NSPredicate *pre = [NSPredicate predicateWithFormat:@"name ENDSWITH %@", @"san"];</span></div><div class="line"><span class="comment">//    request.predicate = pre;</span></div><div class="line">    </div><div class="line">    <span class="comment">//2.3 包含g的员工</span></div><div class="line"><span class="comment">//    NSPredicate *pre = [NSPredicate predicateWithFormat:@"name CONTAINS %@", @"g"];</span></div><div class="line"><span class="comment">//    request.predicate = pre;</span></div><div class="line">    </div><div class="line">    <span class="comment">//2.4 like</span></div><div class="line">    <span class="comment">//以san结尾</span></div><div class="line">    <span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"name like %@"</span>, <span class="string">@"*san"</span>];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    <span class="comment">//3.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, emp.name, emp.age, emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="三、多表关联"><a href="#三、多表关联" class="headerlink" title="三、多表关联"></a>三、多表关联</h2><ul>
<li>在Company.xcdatamodeld模型文件中已有Employee实体，再创建一个Department实体，让两个实体之间建立联系</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f7pzl1yaokj30nq0bc76j.jpg" alt=""></p>
<ul>
<li>员工属于部门，所以在Employee中与Department建立联系</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f7pzmots5tj20in08dt9h.jpg" alt=""></p>
<ul>
<li>然后创建Department实体类，并把之前创建的Employee实体类删除，重新创建</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7pzpnvghmj20q507wmz8.jpg" alt=""></p>
<p><strong>（1）添加信息</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)addEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//创建员工</span></div><div class="line">    </div><div class="line">    <span class="comment">//1.添加zhangsan，属于iOS部门</span></div><div class="line">    Employee *emp1 = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Employee"</span> inManagedObjectContext:<span class="keyword">self</span>.context];</div><div class="line">    emp1.name = <span class="string">@"zhangsan"</span>;</div><div class="line">    emp1.height = @<span class="number">1.7</span>;</div><div class="line">    emp1.age = @<span class="number">27</span>;</div><div class="line">    <span class="comment">//创建iOS部门</span></div><div class="line">    Department *dep1 = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Department"</span> inManagedObjectContext:<span class="keyword">self</span>.context];</div><div class="line">    dep1.name = <span class="string">@"ios"</span>;</div><div class="line">    dep1.createDate = [<span class="built_in">NSDate</span> date];</div><div class="line">    dep1.departNo = <span class="string">@"D001"</span>;</div><div class="line">    </div><div class="line">    emp1.department = dep1;</div><div class="line">    </div><div class="line">    <span class="comment">//2.添加lisi，属于android部门</span></div><div class="line">    Employee *emp2 = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Employee"</span> inManagedObjectContext:<span class="keyword">self</span>.context];</div><div class="line">    emp2.name = <span class="string">@"lisi"</span>;</div><div class="line">    emp2.height = @<span class="number">1.7</span>;</div><div class="line">    emp2.age = @<span class="number">27</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建android部门</span></div><div class="line">    Department *dep2 = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Department"</span> inManagedObjectContext:<span class="keyword">self</span>.context];</div><div class="line">    dep2.name = <span class="string">@"android"</span>;</div><div class="line">    dep2.createDate = [<span class="built_in">NSDate</span> date];</div><div class="line">    dep2.departNo = <span class="string">@"D002"</span>;</div><div class="line">    </div><div class="line">    emp2.department = dep2;</div><div class="line">    </div><div class="line">    <span class="comment">//保存</span></div><div class="line">    [<span class="keyword">self</span>.context save:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>（2）查询信息</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)selectEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//查询iOS部门的员工</span></div><div class="line">    <span class="built_in">NSFetchRequest</span> *request = [<span class="built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="string">@"Employee"</span>];</div><div class="line">    <span class="comment">//过滤查询</span></div><div class="line">    <span class="built_in">NSPredicate</span> *pre = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"department.name = %@"</span>, <span class="string">@"ios"</span>];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    <span class="comment">//2.读取信息</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSArray</span> *array = [<span class="keyword">self</span>.context executeFetchRequest:request error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!error) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee *emp <span class="keyword">in</span> array) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"name:%@ department:%@"</span>, emp.name, emp.department.name);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、多个数据库"><a href="#四、多个数据库" class="headerlink" title="四、多个数据库"></a>四、多个数据库</h2><ul>
<li><strong>一个数据库文件对应一个上下文</strong></li>
</ul>
<p>1）创建Weibo数据库文件<br>2）把创建上下文的代码抽取出来，方便创建两个上下文<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 根据模型文件，返回上下文</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSManagedObjectContext</span> *)setupContextWithModelName:(<span class="built_in">NSString</span> *)modelName</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1.生成上下文(数据操作必须使用上下文)</span></div><div class="line">    <span class="built_in">NSManagedObjectContext</span> *context = [[<span class="built_in">NSManagedObjectContext</span> alloc] initWithConcurrencyType:<span class="built_in">NSMainQueueConcurrencyType</span>];</div><div class="line">    <span class="comment">//2.关联模型文件</span></div><div class="line">    <span class="comment">//2.2创建模型对象</span></div><div class="line">    <span class="built_in">NSURL</span> *modelURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:modelName withExtension:<span class="string">@"momd"</span>];</div><div class="line">    <span class="built_in">NSManagedObjectModel</span> *model = [[<span class="built_in">NSManagedObjectModel</span> alloc] initWithContentsOfURL:modelURL];</div><div class="line">    <span class="comment">//2.1设置上下文的持久存储器</span></div><div class="line">    <span class="built_in">NSPersistentStoreCoordinator</span> *store = [[<span class="built_in">NSPersistentStoreCoordinator</span> alloc] initWithManagedObjectModel:model];</div><div class="line">    <span class="comment">//2.3设置数据库保存的全路径</span></div><div class="line">    <span class="built_in">NSString</span> *doc = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">    <span class="built_in">NSString</span> *filePath = [doc stringByAppendingFormat:<span class="string">@"/%@.sqlite"</span>, modelName];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, filePath);</div><div class="line">    <span class="comment">//参数1：数据库存储类型</span></div><div class="line">    <span class="comment">//URL：存放路径</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    [store addPersistentStoreWithType:<span class="built_in">NSSQLiteStoreType</span> configuration:<span class="literal">nil</span> URL:[<span class="built_in">NSURL</span> fileURLWithPath:filePath] options:<span class="literal">nil</span> error:&amp;error];</div><div class="line">    context.persistentStoreCoordinator = store;</div><div class="line">    <span class="keyword">return</span> context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3）分别创建Company和Weibo上下文<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">//创建Company上下文</span></div><div class="line">    <span class="keyword">self</span>.companyContext = [<span class="keyword">self</span> setupContextWithModelName:<span class="string">@"Company"</span>];</div><div class="line">    <span class="comment">//创建Weibo上下文</span></div><div class="line">    <span class="keyword">self</span>.weiboContext = [<span class="keyword">self</span> setupContextWithModelName:<span class="string">@"Weibo"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4）添加员工信息和微博信息<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)addEmployee:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//创建员工</span></div><div class="line">    Employee *emp = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Employee"</span> inManagedObjectContext:<span class="keyword">self</span>.companyContext];</div><div class="line">    emp.name = <span class="string">@"zhangsan"</span>;</div><div class="line">    emp.height = @<span class="number">1.8</span>;</div><div class="line">    emp.age = @<span class="number">25</span>;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.companyContext save:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//创建微博</span></div><div class="line">    Status *sts = [<span class="built_in">NSEntityDescription</span> insertNewObjectForEntityForName:<span class="string">@"Status"</span> inManagedObjectContext:<span class="keyword">self</span>.weiboContext];</div><div class="line">    </div><div class="line">    sts.text = <span class="string">@"今天天气不错"</span>;</div><div class="line">    sts.author = <span class="string">@"jack"</span>;</div><div class="line">    sts.createDate = [<span class="built_in">NSDate</span> date];</div><div class="line">    [<span class="keyword">self</span>.weiboContext save:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="五、打开CoreData的SQL语句输出开关"><a href="#五、打开CoreData的SQL语句输出开关" class="headerlink" title="五、打开CoreData的SQL语句输出开关"></a>五、打开CoreData的SQL语句输出开关</h2><ul>
<li>打开Product，点击EditScheme</li>
<li>点击Arguments，在ArgumentsPassed On Launch中添加2项<ul>
<li>-com.apple.CoreData.SQLDebug</li>
<li>1</li>
</ul>
</li>
</ul>
<h2 id="六、SQLite和CoreData比较"><a href="#六、SQLite和CoreData比较" class="headerlink" title="六、SQLite和CoreData比较"></a>六、SQLite和CoreData比较</h2><ul>
<li>SQLite是纯c语言存储数据方式</li>
<li>CoreData也是对SQLite的封装 ，它数据的保存直接使用对象，不用再写SQL语句</li>
<li><p>SQLite 性能优于CoreData</p>
</li>
<li><p>什么时候使用SQLite，什么时候使用CoreData</p>
<ul>
<li>Coredata功能不是很强大</li>
<li>如果你的数据库表关联大复杂 三四张表都关联-SQLite</li>
<li>如果数据表结构比较简单 就只有两三张，这些表没有关联关系-CoreData</li>
</ul>
</li>
</ul>
<p>​    </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[（二）应用数据存储之SQLite数据库]]></title>
      <url>http://chenxiao90.com/2016/09/11/%EF%BC%88%E4%BA%8C%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BSQLite%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>（一）什么是SQLite</strong></p>
<ul>
<li>SQLite是一款<strong>轻型</strong>的<strong>嵌入式</strong>数据库</li>
<li>它占用资源低，处理速度快</li>
</ul>
<p><strong>（二）什么是数据库</strong></p>
<ul>
<li>数据库(Database)是按照<strong>数据结构</strong>来组织、存储和管理数据的仓库</li>
<li>数据库可分为两大类：<ul>
<li>关系型数据库(主流)</li>
<li>对象型数据库</li>
</ul>
</li>
</ul>
<p><strong>（三）如何存储数据</strong></p>
<ul>
<li>数据库的存储结构跟excel很像，以表(table)为单位</li>
<li>数据库存储数据的步骤：<ul>
<li>创建数据库<strong>表</strong>(table)，表名t_开头</li>
<li>添加字段，需要存储什么数据，就添加什么<strong>字段</strong>(column，列，属性；字段必须要搞一个主键，记录的唯一标识符）</li>
<li>添加<strong>记录</strong>(row，每行存放多个字段对应的值)</li>
</ul>
</li>
</ul>
<p><strong>（四）什么是主键</strong></p>
<ul>
<li><strong>主键</strong>(Primary Key，简称PK)，用来唯一的标识某一条记录</li>
<li>良好的数据库编程规范应该要保证每条记录的唯一性，因此增加了主键约束</li>
<li>例如t_student可以增加一个id字段作为主键，相当于人的身份证</li>
<li>主键可以是一个或多个字段</li>
</ul>
<h2 id="二、SQL语句"><a href="#二、SQL语句" class="headerlink" title="二、SQL语句"></a>二、SQL语句</h2><p><strong>（一）什么是SQL语句</strong></p>
<ul>
<li>SQL(structured query language)：<strong>结构化查询语句</strong></li>
<li>SQL是一种对关系型数据库中的数据进行<strong>定义</strong>和<strong>操作</strong>的语言</li>
<li>使用SQL语言编写出来的语句，就是SQL语句</li>
</ul>
<p><strong>（二）SQL语句特点</strong></p>
<ul>
<li>不区分大小写</li>
<li>每条语句必须以分号结尾</li>
</ul>
<p><strong>（三）SQL中常用关键字</strong></p>
<ul>
<li>select、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等等</li>
<li><strong>数据库中不可以使用关键字来命名表和字段</strong></li>
</ul>
<p><strong>（四）SQL语句的种类</strong></p>
<p>1）<strong>数据定义语句</strong>（<strong>DDL</strong> : Data Definition Language）</p>
<ul>
<li>包括<strong>creat(创建新表)</strong>和<strong>drop(删除表)</strong>等操作</li>
</ul>
<p>2）<strong>数据操作语句</strong>（<strong>DML</strong> : Data Manipulation Language）</p>
<ul>
<li>包括<strong>insert(添加)</strong>、<strong>update(修改)</strong>、<strong>delete(删除)</strong>等操作<strong>表中的数据(记录)</strong></li>
</ul>
<p>3）<strong>数据查询语句</strong>（<strong>DQL</strong> : Data Query Language）</p>
<ul>
<li>用于查询表中的数据</li>
<li>关键字<strong>select</strong>是用的最多的操作</li>
<li>其他DQL常用的关键字有<strong>where</strong>，<strong>order by</strong>，<strong>group</strong> <strong>by</strong>和<strong>having</strong></li>
</ul>
<p><strong>（五）字段类型</strong></p>
<ul>
<li><p>SQLite将数据划分为以下几种数据类型</p>
<ul>
<li>integer：整型值</li>
<li>real：浮点值</li>
<li>text：文本字符串</li>
<li>blob：二进制数据（比如文件）</li>
</ul>
</li>
<li><p>但实际上SQLite是无类型的</p>
<ul>
<li>就算声明为integer类型，还是能存储文本字符串（主键除外）</li>
<li>为了保持良好的编程规范、方便程序员之间的交流，应该给每个字段加上具体类型</li>
</ul>
</li>
</ul>
<h2 id="三、利用Navicat工具演示数据库"><a href="#三、利用Navicat工具演示数据库" class="headerlink" title="三、利用Navicat工具演示数据库"></a>三、利用Navicat工具演示数据库</h2><ul>
<li>Navicat Premium：<a href="http://www.orsoon.com/Mac/85386.html" target="_blank" rel="external">点击下载</a></li>
<li>Navicat工具的基本使用</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/801b780ajw1f7mlo01shzj21kw0s7q8t.jpg" alt=""></p>
<h3 id="（一）DDL语句"><a href="#（一）DDL语句" class="headerlink" title="（一）DDL语句"></a>（一）DDL语句</h3><p><strong>（1）创建新表（creat）</strong></p>
<p>1）格式：</p>
<ul>
<li>creat table 表名 (字段名1 字段类型1, 字段名2 字段类型2, …);</li>
<li><strong>creat table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …);</strong> </li>
</ul>
<p>2）示例：</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780ajw1f7mn4v1m48j20g202qdg7.jpg" alt=""></p>
<p><strong>（2）删表（drop）</strong></p>
<p>1）格式：</p>
<ul>
<li>drop table 表名;</li>
<li><strong>drop table if exists 表名;</strong> </li>
</ul>
<p>2）示例：</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780ajw1f7mmp4puloj20a202ggln.jpg" alt=""></p>
<h3 id="（二）DML语句"><a href="#（二）DML语句" class="headerlink" title="（二）DML语句"></a>（二）DML语句</h3><p><strong>（1）插入数据（insert into…values）</strong></p>
<p>1）格式：</p>
<ul>
<li>insert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …);</li>
<li><strong>数据库中的字符串内容应该用单括号括住</strong></li>
</ul>
<p>2）示例</p>
<p><img src="http://ww2.sinaimg.cn/large/801b780ajw1f7mmvmzqjoj20b202laa6.jpg" alt=""></p>
<p>结果</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7mmwc4w7yj204c01v747.jpg" alt=""></p>
<p>如果字符串没有用单括号括住</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7mmxh3gz6j20fl08vjs3.jpg" alt=""></p>
<p><strong>（2）修改/更新数据（update set）</strong></p>
<p>1）格式：</p>
<ul>
<li>update 表名 set 字段1 = 字段1的值, 字段2 = 字段2的值, …;</li>
</ul>
<p>2）示例：</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7mn93kig7j209z02qjrg.jpg" alt=""></p>
<ul>
<li><strong>上面的示例会将表中所有记录的name都改成aaa，age都改成110</strong></li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/801b780ajw1f7mnabwsw8j207q02it8n.jpg" alt=""></p>
<p><strong>（3）删除数据（delete from）</strong></p>
<p>1）格式：</p>
<ul>
<li>delete from 表名;</li>
</ul>
<p>2）示例：</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780ajw1f7mncoeypxj209z024t8n.jpg" alt=""></p>
<ul>
<li><strong>上面的示例会将表中的所有记录都删掉</strong></li>
</ul>
<p><strong>（4）条件语句</strong></p>
<ul>
<li>如果只是想更新或删除某些记录，那么就必须在DML语句后加上一些条件</li>
</ul>
<p>1）条件语句的常见格式</p>
<ul>
<li>where 字段 = 某个值; //当某个字段等于某个值的时候</li>
<li>where 字段 is 某个值; //is 相当于 =</li>
<li>where 字段 != 某个值;</li>
<li>where 字段 is not 某个值;</li>
<li>where 字段 &gt; 某个值;</li>
<li>where 字段1 = 某个值 and 字段2 &gt; 某个值; //and 并且</li>
<li>where 字段1 = 某个值 or 字段2 &gt; 某个值; //or 或</li>
</ul>
<p>2）示例：</p>
<ul>
<li>将t_student表中年龄大于10且姓名不等于jack的记录，都改成年龄等于5</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update t_student set age = 5 where age &gt; 10 and name != 'jack';</div></pre></td></tr></table></figure>
<h3 id="（三）DQL语句"><a href="#（三）DQL语句" class="headerlink" title="（三）DQL语句"></a>（三）DQL语句</h3><p><strong>（1）查询数据（select from）</strong></p>
<p>1）格式：</p>
<ul>
<li>select 字段1, 字段2, … from 表名;</li>
<li>select * from 表名; //查询所有的字段</li>
</ul>
<p>2）示例</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780ajw1f7n53a1n20j20a2020q2w.jpg" alt=""></p>
<p><strong>（2）起别名</strong></p>
<p>1）格式（字段和表都可以起别名）：</p>
<ul>
<li>select 字段1 别名, 字段2 别名, … from 表名 别名;</li>
<li>select 字段1 as 别名, 字段2 as 别名, … from 表名 as 别名;</li>
<li>select 别名.字段1, 别名.字段2, … from 表名 别名;</li>
</ul>
<p>2）示例：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select name myname, age myage from t_student ;</div><div class="line"><span class="comment">//给name起个叫做myname的别名，给age起个叫做myage的别名</span></div><div class="line"></div><div class="line">select s.name, s.age from t_student s ;</div><div class="line"><span class="comment">//给t_student表起个别名叫做s，利用s来引用表中的字段</span></div></pre></td></tr></table></figure>
<p>3）给数据库起别名的好处：</p>
<ul>
<li>用别名获取字段，有提示</li>
</ul>
<p><strong>（3）计算记录的数量</strong></p>
<p>1）格式：</p>
<ul>
<li>select count (字段) from 表名;</li>
<li>selet count (*) from 表名;</li>
</ul>
<p><strong>（4）排序</strong></p>
<p>1）格式：</p>
<ul>
<li>select * from t_student order by 字段; </li>
<li>select * from t_student order by 字段 desc; //降序</li>
<li>select * from t_student order by 字段 asc; //升序（默认）</li>
<li>select * from t_student order by age asc, height desc; //先按照年龄排序（升序），年龄相等就按照身高排序（奖序）</li>
</ul>
<p><strong>（5）limit</strong></p>
<ul>
<li>使用limit可以精确控制查询结果的数量，比如每次只查询10条数据</li>
</ul>
<p>1）格式：</p>
<ul>
<li>select * from 表名 limit 数值1, 数值2;</li>
</ul>
<p>2）示例：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * from t_student limit <span class="number">4</span>, <span class="number">8</span>;</div><div class="line"><span class="comment">//跳过最前面4条记录，然后取8条记录</span></div><div class="line"></div><div class="line">select * from t_student limit <span class="number">0</span>, <span class="number">8</span>;</div><div class="line"><span class="comment">//跳过0条记录，取5条记录，意味着取前5条记录</span></div></pre></td></tr></table></figure></p>
<p>3）limit常用来做<strong>分页查询</strong>，比如每页固定显示5条数据：</p>
<ul>
<li>第一页：limit 0, 5;</li>
<li>第二页：limit 5, 5;</li>
<li>第三页：limit 10, 5;</li>
<li>…</li>
<li>第n页：limit 5*(n-1), 5;</li>
</ul>
<h3 id="（四）约束"><a href="#（四）约束" class="headerlink" title="（四）约束"></a>（四）约束</h3><p><strong>（1）简单约束</strong></p>
<p>1）建表时可以给特定的字段设置一些约束，常见约束有：</p>
<ul>
<li>not null : 规定字段的值不能为空</li>
<li>unique : 规定字段的值必须唯一</li>
<li>default : 制定字段的默认值</li>
<li>尽量给字段设定严格的约束，保证数据的规范性</li>
</ul>
<p>2）示例：</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7n62mvi32j20hs01u74d.jpg" alt=""></p>
<p><strong>（2）主键约束</strong></p>
<p>1）如果表中某些字段的值都一样时，就没法区分这些数据，所以增加主键约束，确保记录的唯一性</p>
<p>2）主键的设计原则：</p>
<ul>
<li>主键应当是对用户没有意义的</li>
<li>永远也不要更新主键</li>
<li>主键不应包含动态变化的数据</li>
<li>主键的值应当由计算机自动生成</li>
</ul>
<p>3）主键的声明</p>
<ul>
<li>primary key：声明一个主键，默认包含了 not null 和 unique 两个约束</li>
<li>如果想让主键自动增长（必须是integer类型），应该增加autoincrement</li>
</ul>
<p><strong>（3）外键约束</strong></p>
<p>1）利用外键约束可以用来建立表与表之间的联系</p>
<p>2）外键的一般情况是：一张表的某个字段引用着另一张表的主键字段</p>
<p>3）示例：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建一个外键</span></div><div class="line">create table t_student (<span class="keyword">id</span> integer primary key autoincrement, name text, age integer, class_id integer, constraint fk_t_student_class_id_t_class_id foreign key (class_id)  references t_class (<span class="keyword">id</span>);</div><div class="line"><span class="comment">//t_student表中有一个叫做fk_t_student_class_id_t_class_id的外键</span></div><div class="line"><span class="comment">//这个外键的作用是用t_student表中的class_id字段引用t_class表的id字段</span></div></pre></td></tr></table></figure>
<h2 id="四、通过代码访问数据库"><a href="#四、通过代码访问数据库" class="headerlink" title="四、通过代码访问数据库"></a>四、通过代码访问数据库</h2><ul>
<li>在iOS中使用SQLite3，首先要添加库文件libsqlite3.dylib和导入主头文件</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/801b780ajw1f7n6znx3gdj21kw0bzn09.jpg" alt=""></p>
<h3 id="（一）基本使用"><a href="#（一）基本使用" class="headerlink" title="（一）基本使用"></a>（一）基本使用</h3><p><strong>（1）打开数据库</strong></p>
<p>1）设置数据库的保存路径<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//保存到沙盒caches文件夹内</span></div><div class="line"><span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">//拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachePath stringByAppendingPathComponent:<span class="string">@"student.sqlite"</span>];</div></pre></td></tr></table></figure></p>
<p>2）打开数据库<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sqlite3 *_db;</div><div class="line"><span class="keyword">if</span> (sqlite3_open(filePath.UTF8String, &amp;_db) == SQLITE_OK) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"数据库打开成功"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"数据库打开失败"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>sqlite3_open(<code>const char *filename</code>, <code>sqlite3 **ppDb</code>)</p>
<ul>
<li>filename : 保存数据库的全路径文件名，必须以C字符串传入，所以要将NSString转成C字符串</li>
<li>ppDb : 数据库实例</li>
</ul>
</li>
<li><p>打开数据库会自动创建数据库，并返回一个常量，如果返回的常量等于<code>SQLITE_OK</code>，表明成功打开数据库</p>
</li>
</ul>
<p><strong>（2）创建表</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建表格</span></div><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"create table if not exists t_student (id integer primary key autoincrement, name text, age integer)"</span>;</div><div class="line"><span class="comment">//第一个参数：数据库实例</span></div><div class="line"><span class="comment">//第二个参数：执行的数据库语句</span></div><div class="line"><span class="comment">//最后一个参数：错误信息</span></div><div class="line"><span class="keyword">char</span> *errmsg;</div><div class="line">sqlite3_exec(_db, sql.UTF8String, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg);</div><div class="line"><span class="keyword">if</span> (errmsg) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"创建表失败--%s"</span>, errmsg);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"创建表成功"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sqlite3_exec()可以执行任何SQL语句，包括创表、插入、更新、删除操作。但一般不用它执行查询语句，因为它不会返回查询到的数据</li>
</ul>
<p><strong>（3）增加数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)add:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">NSString</span> *sql = <span class="string">@"insert into t_student (name, age) values ('jack', 18)"</span>;</div><div class="line">    <span class="keyword">char</span> *errmsg;</div><div class="line">    sqlite3_exec(_db, sql.UTF8String, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg);</div><div class="line">    <span class="keyword">if</span> (errmsg) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"增加数据失败--%s"</span>, errmsg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"增加数据成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（4）查询数据</strong></p>
<ul>
<li>创建一个Student模型，用来保存数据</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)select:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//查询语句</span></div><div class="line">    <span class="built_in">NSString</span> *sql = <span class="string">@"select * from t_student"</span>;</div><div class="line">    <span class="built_in">NSMutableArray</span> *arrM = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="comment">//sqlite3_prepare():</span></div><div class="line">    <span class="comment">//1.sqlite3_prepare()的返回值等于SQLITE_OK，说明SQL语句已经准备成功，没有语法问题</span></div><div class="line">    <span class="comment">//2.第三个参数int nByte : 数据库语句的字节数，-1表示自动计算字节数</span></div><div class="line">    <span class="comment">//3.第四个参数ppStmt : 句柄，用来操作查询的数据</span></div><div class="line">    <span class="keyword">if</span> (sqlite3_prepare(_db, sql.UTF8String, <span class="number">-1</span>, &amp;stmt, <span class="literal">NULL</span>) == SQLITE_OK)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//1.查询句柄</span></div><div class="line">        <span class="comment">//sqlite3_step() : 执行SQL语句</span></div><div class="line">        <span class="comment">//返回SQLITE_ROW说明查询到一条语句</span></div><div class="line">        <span class="keyword">while</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</div><div class="line">            <span class="comment">//2.取数据（哪一列）</span></div><div class="line">            <span class="comment">//sqlite3_column_int()会返回指定列的数据</span></div><div class="line">            <span class="keyword">int</span> ID = sqlite3_column_int(stmt, <span class="number">0</span>); <span class="comment">//id列</span></div><div class="line">            <span class="comment">//sqlite3_column_text返回类型为C语言字符串：const unsigned char</span></div><div class="line">            <span class="comment">//所以要把C语言字符串转换成NSString</span></div><div class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:sqlite3_column_text(stmt, <span class="number">1</span>)]; <span class="comment">//name列</span></div><div class="line">            <span class="keyword">int</span> age = sqlite3_column_int(stmt, <span class="number">2</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//把取出的数据存到模型中</span></div><div class="line">            Student *s = [Student studentWithName:name age:age];</div><div class="line">            <span class="comment">//把所有的数据模型保存到模型数组中</span></div><div class="line">            [arrM addObject:s];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Student *s <span class="keyword">in</span> arrM) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@---%d"</span>, s.name, s.age);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（5）模糊查询</strong></p>
<ul>
<li><strong>% : 在SQL语句中是通配符，表示任意</strong></li>
<li>模糊查询的条件语句应使用<code>where like</code></li>
<li>在SQL语句中模糊查询语句：<code>select * from t_student where name like &#39;%p%&#39;</code>，表示查询含有p的name</li>
<li>而在OC中，%有特殊含义，所以模糊查询语句为：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询名字中包含a或者电话中包含1的数据</span></div><div class="line"><span class="built_in">NSString</span> *sql = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"select * from t_contact where name like '%%%a%%' or phone like '%%%1%%';"</span>];</div></pre></td></tr></table></figure>
<ul>
<li>%% == %</li>
</ul>
<p><strong>（6）修改数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)update:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">NSString</span> *sql = <span class="string">@"update t_student set name = 'rose' where id = 1;"</span>;</div><div class="line">    <span class="keyword">char</span> *errmsg;</div><div class="line">    sqlite3_exec(_db, sql.UTF8String, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg);</div><div class="line">    <span class="keyword">if</span> (errmsg) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"修改数据失败--%s"</span>, errmsg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"修改数据成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（6）删除数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)delete:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">NSString</span> *sql = <span class="string">@"delete from t_student where age = 18;"</span>;</div><div class="line">    <span class="keyword">char</span> *errmsg;</div><div class="line">    sqlite3_exec(_db, sql.UTF8String, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg);</div><div class="line">    <span class="keyword">if</span> (errmsg) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"删除数据失败--%s"</span>, errmsg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"删除数据成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="（二）优化"><a href="#（二）优化" class="headerlink" title="（二）优化"></a>（二）优化</h3><ul>
<li>sqlite3_exec()那段代码一直是重复的，可以创建一个工具类SqliteTool</li>
<li>SqliteTool.h</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)execWithSql:(<span class="built_in">NSString</span> *)sql; <span class="comment">//插入、修改、删除</span></div><div class="line"></div><div class="line">+ (<span class="built_in">NSArray</span> *)selectWithSql:(<span class="built_in">NSString</span> *)sql; <span class="comment">//查询</span></div></pre></td></tr></table></figure>
<ul>
<li>SqliteTool.m</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> sqlite3 *_db;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 初始化数据库</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)initialize</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1. 设置数据库保存路径</span></div><div class="line">    <span class="comment">//保存到沙盒caches文件夹内</span></div><div class="line">    <span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">    <span class="comment">//拼接文件名</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [cachePath stringByAppendingPathComponent:<span class="string">@"student.sqlite"</span>];</div><div class="line">    <span class="comment">//2.打开数据库，就会创建数据库文件</span></div><div class="line">    <span class="comment">//fileName : 保存数据库的全路径文件名，必须以C字符串传入，所以要将NSString转成C字符串</span></div><div class="line">    <span class="comment">//ppDb : 数据库实例</span></div><div class="line">    <span class="keyword">if</span> (sqlite3_open(filePath.UTF8String, &amp;_db) == SQLITE_OK) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"数据库打开成功"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"数据库打开失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)execWithSql:(<span class="built_in">NSString</span> *)sql</div><div class="line">&#123;</div><div class="line">    <span class="comment">//第一个参数：数据库实例</span></div><div class="line">    <span class="comment">//第二个参数：执行的数据库语句</span></div><div class="line">    <span class="comment">//最后一个参数：错误信息</span></div><div class="line">    <span class="keyword">char</span> *errmsg;</div><div class="line">    sqlite3_exec(_db, sql.UTF8String, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (errmsg) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"操作失败--%s"</span>,errmsg);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"操作成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSArray</span> *)selectWithSql:(<span class="built_in">NSString</span> *)sql</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *arrM = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="comment">//第三个参数int nByte : 数据库语句的字节数，-1表示自动计算字节数</span></div><div class="line">    <span class="comment">//ppStmt : 句柄用来操作查询的数据</span></div><div class="line">    <span class="comment">//sqlite3_prepare()返回值等于SQLITE_OK，说明SQL语句已经准备成功，没有语法问题</span></div><div class="line">    sqlite3_stmt *stmt;</div><div class="line">    <span class="keyword">if</span> (sqlite3_prepare(_db, sql.UTF8String, <span class="number">-1</span>, &amp;stmt, <span class="literal">NULL</span>) == SQLITE_OK)</div><div class="line">    &#123; <span class="comment">//准备成功</span></div><div class="line">        <span class="comment">//查询句柄</span></div><div class="line">        <span class="comment">//sqlite3_step() : 执行SQL语句</span></div><div class="line">        <span class="comment">//SQLITE_ROW表示查询到一条数据</span></div><div class="line">        <span class="keyword">while</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123; <span class="comment">//有数据</span></div><div class="line">            <span class="comment">//取哪一列的数据</span></div><div class="line">            <span class="keyword">int</span> ID = sqlite3_column_int(stmt, <span class="number">0</span>); <span class="comment">//id列</span></div><div class="line">            <span class="comment">//sqlite3_column_text返回类型为C语言字符串：const unsigned char</span></div><div class="line">            <span class="comment">//所以要把C语言字符串转换成NSString</span></div><div class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:sqlite3_column_text(stmt, <span class="number">1</span>)]; <span class="comment">//name列</span></div><div class="line">            <span class="keyword">int</span> age = sqlite3_column_int(stmt, <span class="number">2</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//把取出的数据存到模型中</span></div><div class="line">            Student *s = [Student studentWithName:name age:age];</div><div class="line">            <span class="comment">//把所有的数据模型保存到模型数组中</span></div><div class="line">            [arrM addObject:s];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arrM;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="五、FMDB"><a href="#五、FMDB" class="headerlink" title="五、FMDB"></a>五、FMDB</h2><p>###（一）简介</p>
<p><strong>（1）什么是FMDB</strong></p>
<ul>
<li>FMDB是iOS平台的SQLite数据库框架</li>
<li>FMDB以OC的方式封装了SQLite的C语言API</li>
</ul>
<p><strong>（2）优点</strong></p>
<ul>
<li>使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码</li>
<li>对比苹果自带的Core Data框架，更加轻量级和灵活</li>
<li>提供了多线程安全的数据库操作方法，有效地防止数据混乱</li>
</ul>
<h3 id="（二）FMDB三个主要的类"><a href="#（二）FMDB三个主要的类" class="headerlink" title="（二）FMDB三个主要的类"></a>（二）FMDB三个主要的类</h3><p><strong>（1）FMDatabase</strong></p>
<ul>
<li>一个FMDatabase对象就代表一个单独的SQLite数据库</li>
<li>用来执行SQL语句</li>
</ul>
<p><strong>（2）FMResultSet</strong></p>
<ul>
<li>使用FMDatabase执行查询后的结果�集</li>
</ul>
<p><strong>（3）FMDatabaseQueue</strong></p>
<ul>
<li>用于在多线程中执行多个查询或更新，它是线程安全的</li>
</ul>
<h3 id="（三）简单使用"><a href="#（三）简单使用" class="headerlink" title="（三）简单使用"></a>（三）简单使用</h3><p><strong>（1）打开数据库</strong></p>
<p>1）创建数据库实例</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.文件全路径</span></div><div class="line"><span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="built_in">NSString</span> *filePath = [cachePath stringByAppendingPathComponent:<span class="string">@"contact.sqlite"</span>];</div><div class="line"><span class="comment">//2.创建一个数据库实例</span></div><div class="line">FMDatabase *db = [FMDatabase databaseWithPath:filePath];</div><div class="line">_db = db;</div></pre></td></tr></table></figure>
<p>2）打开数据库</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> open = [db open];</div><div class="line"><span class="keyword">if</span> (open) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"打开数据库成功"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"打开数据库失败"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（2）创建表</strong></p>
<ul>
<li><strong>在FMDB中，除查询以外的所有操作，都称为“更新”</strong><ul>
<li>create/drop/insert/update/delete等 </li>
</ul>
</li>
<li>使用<code>executeUpdate:</code>方法执行更新<ul>
<li><code>- (BOOL)executeUpdate:(NSString*)sql, ...</code></li>
<li><code>- (BOOL)executeUpdateWithFormat:(NSString*)format, ...</code></li>
<li><code>- (BOOL)executeUpdate:(NSString*)sql withArgumentsInArray:(NSArray *)arguments</code></li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> flag1 = [db executeUpdate:<span class="string">@"create table if not exists t_contact (id integer primary key autoincrement, name text, phone text);"</span>];</div><div class="line"><span class="keyword">if</span> (flag1) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"创建表成功"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"创建表失败"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（2）增加数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)add:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">// ?:表示数据库里面的占位符</span></div><div class="line">    <span class="built_in">BOOL</span> flag = [_db executeUpdate:<span class="string">@"insert into t_contact (name, phone) values (?, ?)"</span>, <span class="string">@"asdf"</span>, <span class="string">@"121312412"</span>];</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"添加数据成功"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"添加数据失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（3）修改数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)update:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">BOOL</span> flag = [_db executeUpdate:<span class="string">@"update t_contact set name = 'aaaa'"</span>];</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"更新数据成功"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"更新数据失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（4）删除数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)delete:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">BOOL</span> flag = [_db executeUpdate:<span class="string">@"delete from t_contact"</span>];</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"删除数据成功"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"删除数据失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（5）查询数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)select:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    FMResultSet *result = [_db executeQuery:<span class="string">@"select * from t_contact"</span>];</div><div class="line">    <span class="comment">//遍历结果集</span></div><div class="line">    <span class="keyword">while</span> ([result next]) &#123;</div><div class="line">        <span class="built_in">NSString</span> *name = [result stringForColumn:<span class="string">@"name"</span>];</div><div class="line">        <span class="built_in">NSString</span> *phone = [result stringForColumn:<span class="string">@"phone"</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@---%@"</span>, name, phone);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（6）FMDatabaseQueue</strong></p>
<ul>
<li>FMDatabase这个类是线程不安全的，如果在多个线程中同时使用一个FMDatabase实例，会造成数据混乱等问题</li>
<li>为保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:path];</div><div class="line">[queue inDatabase:^(FMDatabase *db) &#123;</div><div class="line">    [_db executeUpdate:<span class="string">@"insert into t_contact (name, phone) values (?, ?)"</span>, <span class="string">@"asdf"</span>, <span class="string">@"121312412"</span>];</div><div class="line">    </div><div class="line">    FMResultSet *result = [_db executeQuery:<span class="string">@"select * from t_contact"</span>];</div><div class="line">    <span class="keyword">while</span> ([result next]) &#123;</div><div class="line">        <span class="comment">// …</span></div><div class="line">    &#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<ul>
<li><strong>事务：把有联系的业务逻辑划分到一个事务里，比如转账，必须两个同时修改成功，才能提交</strong></li>
<li>注意把操作放在事务里，有一个操作失败，就主动回滚</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)update:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">// update t_user set money = 500 where name = 'a';</span></div><div class="line">    <span class="comment">//  update t_user set money = 1000 where name = 'b';</span></div><div class="line">    <span class="comment">// a -&gt; b 500 a 500</span></div><div class="line">    <span class="comment">// b + 500 = b 1000</span></div><div class="line">    </div><div class="line">    [_queue inDatabase:^(FMDatabase *db) &#123;</div><div class="line">        <span class="comment">// 开启事务</span></div><div class="line">        [db beginTransaction];</div><div class="line">       <span class="built_in">BOOL</span> flag = [db executeUpdate:<span class="string">@"update t_user set money = ? where name = ?;"</span>,@<span class="number">500</span>,<span class="string">@"a"</span>];</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"success"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"failure"</span>);</div><div class="line">            <span class="comment">// 回滚</span></div><div class="line">            [db rollback];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">BOOL</span> flag1 = [db executeUpdate:<span class="string">@"updat t_user set money = ? where name = ?;"</span>,@<span class="number">1000</span>,<span class="string">@"b"</span>];</div><div class="line">        <span class="keyword">if</span> (flag1) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"success"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"failure"</span>);</div><div class="line">            [db rollback];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 全部操作完成时候再去</span></div><div class="line">        [db commit];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[（一）应用数据存储之plist、偏好设置、归档]]></title>
      <url>http://chenxiao90.com/2016/09/11/%EF%BC%88%E4%B8%80%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8Bplist%E3%80%81%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE%E3%80%81%E5%BD%92%E6%A1%A3/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="应用沙盒"><a href="#应用沙盒" class="headerlink" title="应用沙盒"></a>应用沙盒</h2><ul>
<li>每个iOS应用都有自己的应用沙盒（就是文件系统目录），与其它文件系统隔离</li>
<li>应用沙盒的文件系统目录，如下图所示（假设应用名叫Layer）<br> <img src="http://ww3.sinaimg.cn/large/801b780ajw1f7mi39v6p3j207c058aaa.jpg" alt=""></li>
</ul>
<h4 id="1-应用沙盒结构分析"><a href="#1-应用沙盒结构分析" class="headerlink" title="1. 应用沙盒结构分析"></a>1. 应用沙盒结构分析</h4><ul>
<li>应用程序包：（上图中的Layer）包含了所有的资源文件和可执行文件</li>
<li><strong>Documents：</strong>保存应用运行时生成的<strong>需要持久化的数据</strong>，iTunes同步设备时会<strong>备份</strong>该目录。例如，游戏应用可将游戏存档保存在该目录</li>
<li><strong>tmp：</strong>保存应用运行时所需的<strong>临时数据</strong>，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时<strong>不会备份</strong>该目录</li>
<li><strong>Library/Caches：</strong>保存应用运行时生成的<strong>需要持久化的数据</strong>，iTunes同步设备时<strong>不会备份</strong>该目录。一般存储体积大、不需要备份的非重要数据</li>
<li><strong>Library/Preference：</strong>保存应用的所有<strong>偏好设置</strong>iOS的Setting（设置）应用会在该目录查找应用的设置信息。iTunes同步设备会<strong>备份</strong>该目录</li>
</ul>
<blockquote>
<p>最通俗的理解方式：</p>
<ul>
<li>如果你做个记事本的app，那么用户写了东西需要保存起来，那么这个文件是用户自行生成的，就放在documents文件夹里</li>
<li>如果你有一个app，需要和服务器配合，经常从服务器下载东西给用户看，那么下载的东西就放在Library/Caches里面</li>
<li>apple对这个很严格，放错了就会被拒，主要原因是iOS的iCloud的同步问题</li>
</ul>
</blockquote>
<h4 id="2-获取沙盒的路径"><a href="#2-获取沙盒的路径" class="headerlink" title="2. 获取沙盒的路径"></a>2. 获取沙盒的路径</h4><p>1&gt; 获取根目录<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *homePath = <span class="built_in">NSHomeDirectory</span>();</div></pre></td></tr></table></figure></p>
<p>2&gt; Documents<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//NSUserDomainMask：代表从用户文件下找</span></div><div class="line"><span class="comment">//YES：代表展开路径中的波浪字符“~”</span></div><div class="line"><span class="built_in">NSString</span> *doc = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectorty</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div></pre></td></tr></table></figure></p>
<p>2&gt; 临时目录-tmp<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *tmp = <span class="built_in">NSTemporaryDirectory</span>();</div></pre></td></tr></table></figure></p>
<p>3&gt; 缓存目录：Library/Caches<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div></pre></td></tr></table></figure></p>
<p>4&gt; 偏好设置：Library/Preference</p>
<ul>
<li>通过NSUsersDefaults类存取该目录下的设置信息</li>
</ul>
<h2 id="iOS应用数据存储的常用方式"><a href="#iOS应用数据存储的常用方式" class="headerlink" title="iOS应用数据存储的常用方式"></a>iOS应用数据存储的常用方式</h2><ul>
<li>XML属性列表（plist）归档</li>
<li>Preference（偏好设置）</li>
<li>NSKeyedArchiver归档（NSCoding）</li>
<li>SQLite3</li>
<li>Core Data</li>
</ul>
<h3 id="（一）plist文件存储"><a href="#（一）plist文件存储" class="headerlink" title="（一）plist文件存储"></a>（一）plist文件存储</h3><ul>
<li><p>属性列表是一种XML格式的文件，拓展名为plist</p>
</li>
<li><p>如果对象是NSString、NSDictionary、NSArray、NSData、NSNumber等类型，可以使用<code>writeToFile:atomically:</code>方法直接将对象写到属性列表文件中</p>
</li>
<li><p>不是所有对象都可以保存到plist文件中，要有实现<code>writeToFile:atomically:</code>方法才可以</p>
</li>
<li><p><strong>注意：plist文件不能存储自定义对象</strong></p>
</li>
<li><p>举例：将一个NSArray对象归档（保存）到一个plist属性列表中，放到Caches目录下</p>
</li>
</ul>
<p>1&gt; 保存<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@"asdaf"</span>,@<span class="number">112</span>];</div><div class="line"><span class="comment">//找到Caches路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">//拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"array.plist"</span>];</div><div class="line"><span class="comment">//保存</span></div><div class="line">[array writeToFile:filePath atomically:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>2&gt; 读取：恢复成NSArray对象<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找到Caches路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">//拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"array.plist"</span>];</div><div class="line"><span class="comment">//读取:以什么形式存储就以什么形式读取</span></div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:filePath];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, array);</div></pre></td></tr></table></figure></p>
<h3 id="（二）偏好设置"><a href="#（二）偏好设置" class="headerlink" title="（二）偏好设置"></a>（二）偏好设置</h3><ul>
<li>很多iOS应用都支持偏好设置，比如保存用户名、密码、字体大小等设置</li>
<li>每个应用都有个<strong>NSUserDefaults</strong>实例，通过它来存取偏好设置</li>
</ul>
<p><strong>1. 保存数据-setObject:forKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.保存的数据</span></div><div class="line">[defaults setObject:<span class="string">@"zhangsan"</span> forKey:<span class="string">@"name"</span>];</div><div class="line">[defaults setBool:<span class="literal">YES</span> forKey:<span class="string">@"autoLogin"</span>];</div><div class="line"><span class="comment">//3.调用同步的方法，把数据保存到沙盒文件</span></div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>UserDefaults设置数据时，不是立即写入，而是根据时间戳定时的把缓存中的数据写入本地磁盘，所以调用了set方法之后数据有可能还没用写入磁盘应用程序就终止了。出现以上问题，可以用个调用synchronize方法强制写入</p>
</blockquote>
<ul>
<li>成功保存到Preference目录下：</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f7kuxvj31pj20e001ggll.jpg" alt=""></p>
<ul>
<li>打开文件：</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6jw1f7kuyamv77j20j903q0tf.jpg" alt=""></p>
<p><strong>2. 读取数据-objectForKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.读取数据</span></div><div class="line"><span class="built_in">NSString</span> *name = [defautls objectForKey:<span class="string">@"name"</span>];</div><div class="line"><span class="built_in">BOOL</span> autoLogin = [defautls boolForKey:<span class="string">@"autoLogin"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %d"</span>, name, autoLogin);</div></pre></td></tr></table></figure></p>
<p><strong>3. 删除数据-removeObjectForKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.删除数据</span></div><div class="line">[defaults removeObjectForKey:<span class="string">@"name"</span>];</div><div class="line"><span class="comment">//3.删除也要调用同步方法</span></div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<p><strong>4. 修改数据</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line">[defaults setObject:<span class="string">@"321"</span> forKey:<span class="string">@"password"</span>];</div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>除了读取数据外，保存、修改、删除都要调用<code>[defaults synchronize];</code></p>
</blockquote>
<h3 id="（三）NSKeyedArchiver归档"><a href="#（三）NSKeyedArchiver归档" class="headerlink" title="（三）NSKeyedArchiver归档"></a>（三）NSKeyedArchiver归档</h3><ul>
<li>如果对象是NSString、NSDictionary、NSArray、NSNumber等类型，可以直接用<code>NSKeyedArchiver</code>进行归档和<code>NSKeyedUnarchiver</code>恢复</li>
<li>只有遵守了<strong>NSCoding协议</strong>的对象才可以用这种方法进行归档</li>
<li>NSCoding协议有2个方法：<br> 1&gt; <strong>encodeWithCoder:</strong><br> 每次归档对象时，都会调用这个方法。一般在这个方法里面指定如何归档对象中的每个实例变量，可以使用encodeObject:forKey:方法归档实例变量<br> 2&gt; <strong>initWithCoder:</strong><br> 每次从文件中恢复(解码)对象时，都会调用这个方法。一般在这个方法里面指定如何解码文件中的数据为对象的实例变量，可以使用decodeObject:forKey方法解码实例变量</li>
</ul>
<h4 id="1-如果是系统NSString、NSDictionary、NSArray、NSNumber等类型"><a href="#1-如果是系统NSString、NSDictionary、NSArray、NSNumber等类型" class="headerlink" title="1 ) 如果是系统NSString、NSDictionary、NSArray、NSNumber等类型"></a><strong>1 ) 如果是系统NSString、NSDictionary、NSArray、NSNumber等类型</strong></h4><p><strong>1.归档（编码）：NSKeyedArchiver</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *data = @&#123;<span class="string">@"name"</span>:<span class="string">@"zhangs"</span>,<span class="string">@"heigt"</span>:@<span class="number">1.90</span>&#125;;</div><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"><span class="comment">//3.保存</span></div><div class="line"><span class="comment">// object:需要归档的对象</span></div><div class="line"><span class="comment">// file:文件全路径</span></div><div class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:data toFile:filePath];</div></pre></td></tr></table></figure></p>
<p><strong>2.恢复（解码）：NSKeyedUnarchiver</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"><span class="comment">//3.读取</span></div><div class="line"><span class="built_in">NSDictionary</span> *data = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:filePath];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, data);</div></pre></td></tr></table></figure></p>
<h4 id="2-如果是自己创建的对象，必须要实现NSCoding协议的两个方法"><a href="#2-如果是自己创建的对象，必须要实现NSCoding协议的两个方法" class="headerlink" title="2 ) 如果是自己创建的对象，必须要实现NSCoding协议的两个方法"></a><strong>2 ) 如果是自己创建的对象，必须要实现NSCoding协议的两个方法</strong></h4><ul>
<li>创建Person类，遵守NSCoding协议，有age和name两个属性，在Person.m中要实现NSCoding协议的两个方法<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作用：告诉系统 模型中的哪些属性需要归档</span></div><div class="line"><span class="comment">//何时调用：把一个自定义对象归档时调用</span></div><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder&#123;</div><div class="line">    <span class="comment">//指定每个属性怎么存储</span></div><div class="line">    <span class="comment">// aCoder用来归档</span></div><div class="line">    [aCoder encodeObject:_name forKey:<span class="string">@"name"</span>];</div><div class="line">    [aCoder encodeInt:_age forKey:<span class="string">@"age"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//作用：告诉系统 模型中的哪些属性需要解档</span></div><div class="line"><span class="comment">//何时调用：解析文件时调用</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _name = [aDecoder decodeObjectForKey:<span class="string">@"name"</span>];</div><div class="line">        _age = [aDecoder decodeIntForKey:<span class="string">@"age"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>如果父类也遵守了NSCoding协议，请注意：</p>
<ol>
<li>应该在<code>encodeWithCoder:</code>方法中添加一句<code>[super encodeWithCode:encode];</code>，确保继承的实例变量也能被归档</li>
<li>应该在<code>initWithCoder:</code>方法中添加一句<code>self = [super initWithCoder:decoder];</code>，确保继承的实例变量也能被恢复</li>
</ol>
</blockquote>
<h4 id="3-NSData：归档多个对象"><a href="#3-NSData：归档多个对象" class="headerlink" title="3 ) NSData：归档多个对象"></a>3 ) NSData：归档多个对象</h4><ul>
<li><p>使用archiveRootObject:toFile:方法可以将一个对象直接写入到一个文件中，但有时候可能想将<strong>多个对象</strong>写入到同一个文件中，那么就要使用<strong>NSData</strong>来进行归档对象</p>
</li>
<li><p>NSData可以为一些数据提供临时存储空间，以便随后写入文件，或者存放从磁盘读取的文件内容。可以使用<code>[NSMutableData data]</code>创建可变数据空间</p>
</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f7l6kqzzbqj20r306aace.jpg" alt=""></p>
<p>1&gt; 保存数据<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建两个自定义对象</span></div><div class="line">Person *p1 = [[Person alloc] init];</div><div class="line">p1.age = <span class="number">23</span>;</div><div class="line">p1.name= <span class="string">@"jack"</span>;</div><div class="line">Person *p2 = [[Person alloc] init];</div><div class="line">p2.age = <span class="number">123</span>;</div><div class="line">p2.name= <span class="string">@"rose"</span>;</div><div class="line"></div><div class="line"><span class="comment">//保存路径</span></div><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"></div><div class="line"><span class="comment">//利用NSMutableData把两个对象保存到相关路径内</span></div><div class="line"><span class="comment">//1.新建一块可变数据区</span></div><div class="line"><span class="built_in">NSMutableData</span> *data = [<span class="built_in">NSMutableData</span> data];</div><div class="line"><span class="comment">//2.将数据区连接到一个NSKeyedArchiver对象</span></div><div class="line"><span class="built_in">NSKeyedArchiver</span> *archiver = [[<span class="built_in">NSKeyedArchiver</span> alloc] initForWritingWithMutableData:data];</div><div class="line"><span class="comment">//3.归档对象，保存到NSMutableData中</span></div><div class="line">[archiver encodeObject:p1 forKey:<span class="string">@"p1"</span>];</div><div class="line">[archiver encodeObject:p2 forKey:<span class="string">@"p2"</span>];</div><div class="line"><span class="comment">//4.归档完毕(一定要调用这个方法)</span></div><div class="line">[archiver finishEncoding];</div><div class="line"><span class="comment">//5.将归档的数据写入文件</span></div><div class="line">[data writeToFile:filePath atomically:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>2&gt; 读取数据<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.读取NSData数据</span></div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</div><div class="line"><span class="comment">//4.根据数据解析成一个NSKeyedUnarchiver对象</span></div><div class="line"><span class="built_in">NSKeyedUnarchiver</span> *unarchiver = [[<span class="built_in">NSKeyedUnarchiver</span> alloc] initForReadingWithData:data];</div><div class="line"><span class="comment">//5.再将解析后的NSKeyedUnarchiver对象恢复成自定义对象</span></div><div class="line">Person *p1 = [unarchiver decodeObjectForKey:<span class="string">@"p1"</span>];</div><div class="line">Person *p2 = [unarchiver decodeObjectForKey:<span class="string">@"p2"</span>];</div><div class="line"><span class="comment">//6.恢复完毕</span></div><div class="line">[unarchiver finishDecoding];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@-%@"</span>, p1.name, p2.name);</div></pre></td></tr></table></figure></p>
<h4 id="5-利用归档实现深复制"><a href="#5-利用归档实现深复制" class="headerlink" title="5 ) 利用归档实现深复制"></a>5 ) 利用归档实现深复制</h4><ul>
<li>比如对一个Person对象进行深复制</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.临时存储person1的数据</span></div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSKeyedArchiver</span> archiverDataWithRootObject:person1];</div><div class="line"><span class="comment">//2.解析data，生成一个新的person对象</span></div><div class="line">Person *person2 = [<span class="built_in">NSKeyedUnarchiver</span> unarchiverObjectWithData:data];</div><div class="line"><span class="comment">//3.分别打印内存地址</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"person1:0x%x"</span>, person1); <span class="comment">// person1:0x7177a60</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"person2:0x%x"</span>, person2); <span class="comment">// person2:0x7177cf0</span></div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6jw1f7l7boierrj20t003rt9o.jpg" alt=""></p>
<p>局限：一次性做读取和存储操作</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIScrollView轮播图(三个imageView)]]></title>
      <url>http://chenxiao90.com/2016/09/05/UIScrollView%E8%BD%AE%E6%92%AD%E5%9B%BE-%E4%B8%89%E4%B8%AAimageView/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>一共有3个imageView，初始化状态看到的是位于3个imageView中间的第一张图片，此时scrollView的contentOffsetX等于width，然后左边是最后一张图片，右边是第二张图片。如果用户向左滑动显示第二张图片，当第二张图片完全显示出来后，此时scrollView的contentOffsetX等于2*width，我们要做的第一件事就是将用户移动的位置进行复位，也就是让scrollView的contentOffsetX变回width，然后重新设置每个imageView应该显示的图片，因为代码执行速度很快，所以你意识不到它的切换。这样左边的imageView显示的是当前图片的上一张图片，右边的imageView显示的是当前图片的下一张图片，如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/801b780ajw1f7j256tk0gj214d0kkdkm.jpg" alt=""></p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="先自定义一个view继承自UIView，作为封装的轮播图类"><a href="#先自定义一个view继承自UIView，作为封装的轮播图类" class="headerlink" title="先自定义一个view继承自UIView，作为封装的轮播图类"></a>先自定义一个view继承自UIView，作为封装的轮播图类</h3><p><strong>CXInfiniteScrollView.m中</strong></p>
<p>（一）初始化添加子控件</p>
<ul>
<li>子控件包括：UIScrollView、UIPageControl、三个UIImageView</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UIImageView的个数</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSUInteger</span> <span class="keyword">const</span> CXImageViewCout = <span class="number">3</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 初始化：添加子控件</div><div class="line"> */</div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) &#123;</div><div class="line">        _scrollInterval = <span class="number">2.0</span>;</div><div class="line">        _animationInterval = <span class="number">1.0</span>;</div><div class="line">        <span class="comment">//添加scrollView对象</span></div><div class="line">        <span class="built_in">UIScrollView</span> *scrollView = [[<span class="built_in">UIScrollView</span> alloc] init];</div><div class="line">        scrollView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        scrollView.showsHorizontalScrollIndicator = <span class="literal">NO</span>;</div><div class="line">        scrollView.showsVerticalScrollIndicator = <span class="literal">NO</span>;</div><div class="line">        scrollView.pagingEnabled = <span class="literal">YES</span>;</div><div class="line">        scrollView.delegate = <span class="keyword">self</span>;</div><div class="line">        scrollView.bounces = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span> addSubview:scrollView];</div><div class="line">        <span class="keyword">self</span>.scrollView = scrollView;</div><div class="line">        </div><div class="line">        <span class="comment">//添加3个UIImageView对象</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">            <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] init];</div><div class="line">            imageView.contentMode = <span class="built_in">UIViewContentModeScaleToFill</span>;</div><div class="line">            [scrollView addSubview:imageView];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//添加pageControl对象</span></div><div class="line">        <span class="built_in">UIPageControl</span> *pageControl = [[<span class="built_in">UIPageControl</span> alloc] init];</div><div class="line">        [<span class="keyword">self</span> addSubview:pageControl];</div><div class="line">        pageControl.currentPageIndicatorTintColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">        <span class="keyword">self</span>.pageControl = pageControl;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（二）布局子控件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 布局子控件</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)layoutSubviews</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> layoutSubviews];</div><div class="line">    </div><div class="line">    <span class="comment">//scrollView</span></div><div class="line">    <span class="keyword">self</span>.scrollView.frame = <span class="keyword">self</span>.bounds;</div><div class="line">    </div><div class="line">    <span class="comment">//pageControl</span></div><div class="line">    <span class="built_in">CGSize</span> pageSize = [<span class="keyword">self</span>.pageControl sizeForNumberOfPages:_imageNames.count];</div><div class="line">    <span class="built_in">CGFloat</span> pageControlX = (<span class="keyword">self</span>.bounds.size.width - pageSize.width) / <span class="number">2</span>;</div><div class="line">    <span class="built_in">CGFloat</span> pageControlY = <span class="keyword">self</span>.bounds.size.height - pageSize.height;</div><div class="line">    <span class="keyword">self</span>.pageControl.frame = <span class="built_in">CGRectMake</span>(pageControlX, pageControlY, pageSize.width, pageSize.height);</div><div class="line">    </div><div class="line">    <span class="comment">//imageView</span></div><div class="line">    <span class="built_in">CGFloat</span> imageW = <span class="keyword">self</span>.scrollView.frame.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> imageH = <span class="keyword">self</span>.scrollView.frame.size.height;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        imageView.frame = <span class="built_in">CGRectMake</span>(i * imageW, <span class="number">0</span>, imageW, imageH);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(imageW, <span class="number">0</span>);</div><div class="line">    <span class="keyword">self</span>.scrollView.contentSize = <span class="built_in">CGSizeMake</span>(imageW * CXImageViewCout, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（三）属性的set方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 根据传入的图片数组设置图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setImageNames:(<span class="built_in">NSArray</span> *)imageNames</div><div class="line">&#123;</div><div class="line">    _imageNames = imageNames;</div><div class="line">    <span class="keyword">self</span>.pageControl.numberOfPages = imageNames.count;</div><div class="line">    <span class="comment">//更新UIImageView内容</span></div><div class="line">    [<span class="keyword">self</span> updateContent];</div><div class="line">    <span class="comment">//开启定时器</span></div><div class="line">    [<span class="keyword">self</span> startTimer];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：要在该方法中更新UIImageView内容，意思是获取到图片后接着更新UIImageView，之前在别的地方调用的updateContent，导致scrollView老是等好几秒才显示网络图片，弄了好久才发现是这的问题</strong></p>
</blockquote>
<p>（四）设置UIImageView的内容</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 更新UIImageView内容</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)updateContent</div><div class="line">&#123;</div><div class="line">    <span class="comment">//从左到右重新设置每个imageView的图片内容</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        </div><div class="line">        <span class="comment">//为了设置imageView对应的图片索引</span></div><div class="line">        <span class="built_in">NSInteger</span> imageIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">//最左边的imageView</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123; <span class="comment">//最右边的imageView</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//无限循环的处理</span></div><div class="line">        <span class="keyword">if</span> (imageIndex == <span class="number">-1</span>) &#123; <span class="comment">//当上面的imageIndex为0时，如果再向右拖动，左侧图片显示，应该让它显示为最后一张图片</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.imageNames.count - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imageIndex == <span class="keyword">self</span>.imageNames.count) &#123; <span class="comment">//当上面的imageIndex超过最大图片数量时，也就是滑到最右再继续滑动的时候，让它显示第一张图片</span></div><div class="line">            imageIndex = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//判断是URL还是本地图片</span></div><div class="line">        <span class="built_in">NSString</span> *imageName = <span class="keyword">self</span>.imageNames[imageIndex];</div><div class="line">        <span class="keyword">if</span> (imageName) &#123;</div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> verifyURL:imageName]) &#123;</div><div class="line">                <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:imageName];</div><div class="line">                [imageView sd_setImageWithURL:url];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                imageView.image = [<span class="built_in">UIImage</span> imageNamed:imageName];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//绑定图片索引到imageView的tag</span></div><div class="line">        imageView.tag = imageIndex;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//scrollView的contentOffset（偏移量归位）</span></div><div class="line">    <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.scrollView.frame.size.width, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 判断是否是URL</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)verifyURL:(<span class="built_in">NSString</span> *)url</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *pattern = <span class="string">@"((http|ftp|https)://)(([a-zA-Z0-9\\._-]+\\.[a-zA-Z]&#123;2,6&#125;)|([0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;))(:[0-9]&#123;1,4&#125;)*(/[a-zA-Z0-9\\&amp;%_\\./-~-]*)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *p = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, pattern];</div><div class="line">    <span class="built_in">BOOL</span> isMatch = [p evaluateWithObject:url];</div><div class="line">    <span class="keyword">return</span> isMatch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（五）scrollView代理方法的设置</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽的时候</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    <span class="comment">//拖动的时候，哪张图片最靠中间，也就是偏移量最小，就滑到哪页</span></div><div class="line">    <span class="comment">// imageView的x 和 scrollView偏移量x 的最小差值</span></div><div class="line">    <span class="built_in">CGFloat</span> minDelta = MAXFLOAT; <span class="comment">//MAXFLOAT:最大浮点数</span></div><div class="line">    </div><div class="line">    <span class="comment">// 找出显示在最中间的图片索引</span></div><div class="line">    <span class="built_in">NSInteger</span> centerImageIndex = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        </div><div class="line">        <span class="comment">// ABS : 取得绝对值</span></div><div class="line">        <span class="built_in">CGFloat</span> delta = ABS(imageView.frame.origin.x - <span class="keyword">self</span>.scrollView.contentOffset.x);</div><div class="line">        <span class="keyword">if</span> (delta &lt; minDelta) &#123;</div><div class="line">            minDelta = delta;</div><div class="line">            centerImageIndex = imageView.tag;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置页码</span></div><div class="line">    <span class="keyword">self</span>.pageControl.currentPage = centerImageIndex;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽开始时停止定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewWillBeginDragging:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> stopTimer];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽结束时开启定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> startTimer];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 减速停止的时候更新图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> updateContent];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（六）设置定时器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 开启定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)startTimer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_timer) &#123;</div><div class="line">        _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:_scrollInterval target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(nextPage) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 停止定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)stopTimer</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="comment">//计时器被系统强引用，必须手动释放</span></div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 显示下一页</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)nextPage</div><div class="line">&#123;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:_animationInterval animations:^&#123;</div><div class="line">        <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(<span class="number">2</span> * <span class="keyword">self</span>.scrollView.frame.size.width, <span class="number">0</span>);</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        <span class="comment">//更新视图</span></div><div class="line">        [<span class="keyword">self</span> updateContent];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（七）对外的接口</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CXInfiniteScrollView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *imageNames;</div><div class="line"><span class="comment">/** 切换图片的时间间隔 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> scrollInterval;</div><div class="line"><span class="comment">/** 切换图片动画的时长 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> animationInterval;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>（八）外界调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">NSArray</span> *images = @[<span class="string">@"001.jpg"</span>, <span class="string">@"002.jpg"</span>, <span class="string">@"003.jpg"</span>, <span class="string">@"004.jpg"</span>];</div><div class="line">    CXInfiniteScrollView *scroll = [[CXInfiniteScrollView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">375</span>, <span class="number">200</span>)];</div><div class="line">        scroll.imageNames = images;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:scroll];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>后续将添加imageView的点击事件、标题label、图片缓存等</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最简单的在OS X系统下制作gif动态图]]></title>
      <url>http://chenxiao90.com/2016/09/05/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%A8OS-X%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%88%B6%E4%BD%9Cgif%E5%8A%A8%E6%80%81%E5%9B%BE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="所需软件："><a href="#所需软件：" class="headerlink" title="所需软件："></a>所需软件：</h3><ul>
<li>licecap ： <a href="http://www.pc6.com/mac/135257.html" target="_blank" rel="external">点击下载</a></li>
</ul>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1.打开licecap</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7ix5imlshj20go0c8wfs.jpg" alt=""></p>
<p>2.调整大小后点击开始，会弹出设置框，点击save，就开始录制了</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7ix6khxbej20i00bxta2.jpg" alt=""></p>
<p>3.点击stop结束录制，即可查看</p>
<p><img src="http://ww2.sinaimg.cn/large/801b780ajw1f7ix8iin13g20ae05je83.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://chenxiao90.com/2016/08/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
