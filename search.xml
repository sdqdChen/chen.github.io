<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[（一）应用数据存储之plist、偏好设置、归档]]></title>
      <url>http://chenxiao90.com/2016/09/11/%EF%BC%88%E4%B8%80%EF%BC%89%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8Bplist%E3%80%81%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE%E3%80%81%E5%BD%92%E6%A1%A3/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="应用沙盒"><a href="#应用沙盒" class="headerlink" title="应用沙盒"></a>应用沙盒</h2><ul>
<li>每个iOS应用都有自己的应用沙盒（就是文件系统目录），与其它文件系统隔离</li>
<li>应用沙盒的文件系统目录，如下图所示（假设应用名叫Layer）<br> <img src="http://ww3.sinaimg.cn/large/801b780ajw1f7mi39v6p3j207c058aaa.jpg" alt=""></li>
</ul>
<h4 id="1-应用沙盒结构分析"><a href="#1-应用沙盒结构分析" class="headerlink" title="1. 应用沙盒结构分析"></a>1. 应用沙盒结构分析</h4><ul>
<li>应用程序包：（上图中的Layer）包含了所有的资源文件和可执行文件</li>
<li><strong>Documents：</strong>保存应用运行时生成的<strong>需要持久化的数据</strong>，iTunes同步设备时会<strong>备份</strong>该目录。例如，游戏应用可将游戏存档保存在该目录</li>
<li><strong>tmp：</strong>保存应用运行时所需的<strong>临时数据</strong>，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时<strong>不会备份</strong>该目录</li>
<li><strong>Library/Caches：</strong>保存应用运行时生成的<strong>需要持久化的数据</strong>，iTunes同步设备时<strong>不会备份</strong>该目录。一般存储体积大、不需要备份的非重要数据</li>
<li><strong>Library/Preference：</strong>保存应用的所有<strong>偏好设置</strong>iOS的Setting（设置）应用会在该目录查找应用的设置信息。iTunes同步设备会<strong>备份</strong>该目录</li>
</ul>
<blockquote>
<p>最通俗的理解方式：</p>
<ul>
<li>如果你做个记事本的app，那么用户写了东西需要保存起来，那么这个文件是用户自行生成的，就放在documents文件夹里</li>
<li>如果你有一个app，需要和服务器配合，经常从服务器下载东西给用户看，那么下载的东西就放在Library/Caches里面</li>
<li>apple对这个很严格，放错了就会被拒，主要原因是iOS的iCloud的同步问题</li>
</ul>
</blockquote>
<h4 id="2-获取沙盒的路径"><a href="#2-获取沙盒的路径" class="headerlink" title="2. 获取沙盒的路径"></a>2. 获取沙盒的路径</h4><p>1&gt; 获取根目录<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *homePath = <span class="built_in">NSHomeDirectory</span>();</div></pre></td></tr></table></figure></p>
<p>2&gt; Documents<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//NSUserDomainMask：代表从用户文件下找</span></div><div class="line"><span class="comment">//YES：代表展开路径中的波浪字符“~”</span></div><div class="line"><span class="built_in">NSString</span> *doc = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectorty</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div></pre></td></tr></table></figure></p>
<p>2&gt; 临时目录-tmp<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *tmp = <span class="built_in">NSTemporaryDirectory</span>();</div></pre></td></tr></table></figure></p>
<p>3&gt; 缓存目录：Library/Caches<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div></pre></td></tr></table></figure></p>
<p>4&gt; 偏好设置：Library/Preference</p>
<ul>
<li>通过NSUsersDefaults类存取该目录下的设置信息</li>
</ul>
<h2 id="iOS应用数据存储的常用方式"><a href="#iOS应用数据存储的常用方式" class="headerlink" title="iOS应用数据存储的常用方式"></a>iOS应用数据存储的常用方式</h2><ul>
<li>XML属性列表（plist）归档</li>
<li>Preference（偏好设置）</li>
<li>NSKeyedArchiver归档（NSCoding）</li>
<li>SQLite3</li>
<li>Core Data</li>
</ul>
<h3 id="（一）plist文件存储"><a href="#（一）plist文件存储" class="headerlink" title="（一）plist文件存储"></a>（一）plist文件存储</h3><ul>
<li><p>属性列表是一种XML格式的文件，拓展名为plist</p>
</li>
<li><p>如果对象是NSString、NSDictionary、NSArray、NSData、NSNumber等类型，可以使用<code>writeToFile:atomically:</code>方法直接将对象写到属性列表文件中</p>
</li>
<li><p>不是所有对象都可以保存到plist文件中，要有实现<code>writeToFile:atomically:</code>方法才可以</p>
</li>
<li><p><strong>注意：plist文件不能存储自定义对象</strong></p>
</li>
<li><p>举例：将一个NSArray对象归档（保存）到一个plist属性列表中，放到Caches目录下</p>
</li>
</ul>
<p>1&gt; 保存<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@"asdaf"</span>,@<span class="number">112</span>];</div><div class="line"><span class="comment">//找到Caches路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">//拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"array.plist"</span>];</div><div class="line"><span class="comment">//保存</span></div><div class="line">[array writeToFile:filePath atomically:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>2&gt; 读取：恢复成NSArray对象<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找到Caches路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">//拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"array.plist"</span>];</div><div class="line"><span class="comment">//读取:以什么形式存储就以什么形式读取</span></div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:filePath];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, array);</div></pre></td></tr></table></figure></p>
<h3 id="（二）偏好设置"><a href="#（二）偏好设置" class="headerlink" title="（二）偏好设置"></a>（二）偏好设置</h3><ul>
<li>很多iOS应用都支持偏好设置，比如保存用户名、密码、字体大小等设置</li>
<li>每个应用都有个<strong>NSUserDefaults</strong>实例，通过它来存取偏好设置</li>
</ul>
<p><strong>1. 保存数据-setObject:forKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.保存的数据</span></div><div class="line">[defaults setObject:<span class="string">@"zhangsan"</span> forKey:<span class="string">@"name"</span>];</div><div class="line">[defaults setBool:<span class="literal">YES</span> forKey:<span class="string">@"autoLogin"</span>];</div><div class="line"><span class="comment">//3.调用同步的方法，把数据保存到沙盒文件</span></div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>UserDefaults设置数据时，不是立即写入，而是根据时间戳定时的把缓存中的数据写入本地磁盘，所以调用了set方法之后数据有可能还没用写入磁盘应用程序就终止了。出现以上问题，可以用个调用synchronize方法强制写入</p>
</blockquote>
<ul>
<li>成功保存到Preference目录下：</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f7kuxvj31pj20e001ggll.jpg" alt=""></p>
<ul>
<li>打开文件：</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6jw1f7kuyamv77j20j903q0tf.jpg" alt=""></p>
<p><strong>2. 读取数据-objectForKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.读取数据</span></div><div class="line"><span class="built_in">NSString</span> *name = [defautls objectForKey:<span class="string">@"name"</span>];</div><div class="line"><span class="built_in">BOOL</span> autoLogin = [defautls boolForKey:<span class="string">@"autoLogin"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %d"</span>, name, autoLogin);</div></pre></td></tr></table></figure></p>
<p><strong>3. 删除数据-removeObjectForKey:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.先创建NSUserDefaults实例</span></div><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="comment">//2.删除数据</span></div><div class="line">[defaults removeObjectForKey:<span class="string">@"name"</span>];</div><div class="line"><span class="comment">//3.删除也要调用同步方法</span></div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<p><strong>4. 修改数据</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line">[defaults setObject:<span class="string">@"321"</span> forKey:<span class="string">@"password"</span>];</div><div class="line">[defaults synchronize];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>除了读取数据外，保存、修改、删除都要调用<code>[defaults synchronize];</code></p>
</blockquote>
<h3 id="（三）NSKeyedArchiver归档"><a href="#（三）NSKeyedArchiver归档" class="headerlink" title="（三）NSKeyedArchiver归档"></a>（三）NSKeyedArchiver归档</h3><ul>
<li>如果对象是NSString、NSDictionary、NSArray、NSNumber等类型，可以直接用<code>NSKeyedArchiver</code>进行归档和<code>NSKeyedUnarchiver</code>恢复</li>
<li>只有遵守了<strong>NSCoding协议</strong>的对象才可以用这种方法进行归档</li>
<li>NSCoding协议有2个方法：<br> 1&gt; <strong>encodeWithCoder:</strong><br> 每次归档对象时，都会调用这个方法。一般在这个方法里面指定如何归档对象中的每个实例变量，可以使用encodeObject:forKey:方法归档实例变量<br> 2&gt; <strong>initWithCoder:</strong><br> 每次从文件中恢复(解码)对象时，都会调用这个方法。一般在这个方法里面指定如何解码文件中的数据为对象的实例变量，可以使用decodeObject:forKey方法解码实例变量</li>
</ul>
<h4 id="1-如果是系统NSString、NSDictionary、NSArray、NSNumber等类型"><a href="#1-如果是系统NSString、NSDictionary、NSArray、NSNumber等类型" class="headerlink" title="1 ) 如果是系统NSString、NSDictionary、NSArray、NSNumber等类型"></a><strong>1 ) 如果是系统NSString、NSDictionary、NSArray、NSNumber等类型</strong></h4><p><strong>1.归档（编码）：NSKeyedArchiver</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *data = @&#123;<span class="string">@"name"</span>:<span class="string">@"zhangs"</span>,<span class="string">@"heigt"</span>:@<span class="number">1.90</span>&#125;;</div><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"><span class="comment">//3.保存</span></div><div class="line"><span class="comment">// object:需要归档的对象</span></div><div class="line"><span class="comment">// file:文件全路径</span></div><div class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:data toFile:filePath];</div></pre></td></tr></table></figure></p>
<p><strong>2.恢复（解码）：NSKeyedUnarchiver</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"><span class="comment">//3.读取</span></div><div class="line"><span class="built_in">NSDictionary</span> *data = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:filePath];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, data);</div></pre></td></tr></table></figure></p>
<h4 id="2-如果是自己创建的对象，必须要实现NSCoding协议的两个方法"><a href="#2-如果是自己创建的对象，必须要实现NSCoding协议的两个方法" class="headerlink" title="2 ) 如果是自己创建的对象，必须要实现NSCoding协议的两个方法"></a><strong>2 ) 如果是自己创建的对象，必须要实现NSCoding协议的两个方法</strong></h4><ul>
<li>创建Person类，遵守NSCoding协议，有age和name两个属性，在Person.m中要实现NSCoding协议的两个方法<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作用：告诉系统 模型中的哪些属性需要归档</span></div><div class="line"><span class="comment">//何时调用：把一个自定义对象归档时调用</span></div><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder&#123;</div><div class="line">    <span class="comment">//指定每个属性怎么存储</span></div><div class="line">    <span class="comment">// aCoder用来归档</span></div><div class="line">    [aCoder encodeObject:_name forKey:<span class="string">@"name"</span>];</div><div class="line">    [aCoder encodeInt:_age forKey:<span class="string">@"age"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//作用：告诉系统 模型中的哪些属性需要解档</span></div><div class="line"><span class="comment">//何时调用：解析文件时调用</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _name = [aDecoder decodeObjectForKey:<span class="string">@"name"</span>];</div><div class="line">        _age = [aDecoder decodeIntForKey:<span class="string">@"age"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>如果父类也遵守了NSCoding协议，请注意：</p>
<ol>
<li>应该在<code>encodeWithCoder:</code>方法中添加一句<code>[super encodeWithCode:encode];</code>，确保继承的实例变量也能被归档</li>
<li>应该在<code>initWithCoder:</code>方法中添加一句<code>self = [super initWithCoder:decoder];</code>，确保继承的实例变量也能被恢复</li>
</ol>
</blockquote>
<h4 id="3-NSData：归档多个对象"><a href="#3-NSData：归档多个对象" class="headerlink" title="3 ) NSData：归档多个对象"></a>3 ) NSData：归档多个对象</h4><ul>
<li><p>使用archiveRootObject:toFile:方法可以将一个对象直接写入到一个文件中，但有时候可能想将<strong>多个对象</strong>写入到同一个文件中，那么就要使用<strong>NSData</strong>来进行归档对象</p>
</li>
<li><p>NSData可以为一些数据提供临时存储空间，以便随后写入文件，或者存放从磁盘读取的文件内容。可以使用<code>[NSMutableData data]</code>创建可变数据空间</p>
</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f7l6kqzzbqj20r306aace.jpg" alt=""></p>
<p>1&gt; 保存数据<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建两个自定义对象</span></div><div class="line">Person *p1 = [[Person alloc] init];</div><div class="line">p1.age = <span class="number">23</span>;</div><div class="line">p1.name= <span class="string">@"jack"</span>;</div><div class="line">Person *p2 = [[Person alloc] init];</div><div class="line">p2.age = <span class="number">123</span>;</div><div class="line">p2.name= <span class="string">@"rose"</span>;</div><div class="line"></div><div class="line"><span class="comment">//保存路径</span></div><div class="line"><span class="comment">//1.获取caches文件夹</span></div><div class="line"><span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">//2.拼接文件名</span></div><div class="line"><span class="built_in">NSString</span> *filePath = [cachesPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</div><div class="line"></div><div class="line"><span class="comment">//利用NSMutableData把两个对象保存到相关路径内</span></div><div class="line"><span class="comment">//1.新建一块可变数据区</span></div><div class="line"><span class="built_in">NSMutableData</span> *data = [<span class="built_in">NSMutableData</span> data];</div><div class="line"><span class="comment">//2.将数据区连接到一个NSKeyedArchiver对象</span></div><div class="line"><span class="built_in">NSKeyedArchiver</span> *archiver = [[<span class="built_in">NSKeyedArchiver</span> alloc] initForWritingWithMutableData:data];</div><div class="line"><span class="comment">//3.归档对象，保存到NSMutableData中</span></div><div class="line">[archiver encodeObject:p1 forKey:<span class="string">@"p1"</span>];</div><div class="line">[archiver encodeObject:p2 forKey:<span class="string">@"p2"</span>];</div><div class="line"><span class="comment">//4.归档完毕(一定要调用这个方法)</span></div><div class="line">[archiver finishEncoding];</div><div class="line"><span class="comment">//5.将归档的数据写入文件</span></div><div class="line">[data writeToFile:filePath atomically:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>2&gt; 读取数据<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.读取NSData数据</span></div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</div><div class="line"><span class="comment">//4.根据数据解析成一个NSKeyedUnarchiver对象</span></div><div class="line"><span class="built_in">NSKeyedUnarchiver</span> *unarchiver = [[<span class="built_in">NSKeyedUnarchiver</span> alloc] initForReadingWithData:data];</div><div class="line"><span class="comment">//5.再将解析后的NSKeyedUnarchiver对象恢复成自定义对象</span></div><div class="line">Person *p1 = [unarchiver decodeObjectForKey:<span class="string">@"p1"</span>];</div><div class="line">Person *p2 = [unarchiver decodeObjectForKey:<span class="string">@"p2"</span>];</div><div class="line"><span class="comment">//6.恢复完毕</span></div><div class="line">[unarchiver finishDecoding];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@-%@"</span>, p1.name, p2.name);</div></pre></td></tr></table></figure></p>
<h4 id="5-利用归档实现深复制"><a href="#5-利用归档实现深复制" class="headerlink" title="5 ) 利用归档实现深复制"></a>5 ) 利用归档实现深复制</h4><ul>
<li>比如对一个Person对象进行深复制</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.临时存储person1的数据</span></div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSKeyedArchiver</span> archiverDataWithRootObject:person1];</div><div class="line"><span class="comment">//2.解析data，生成一个新的person对象</span></div><div class="line">Person *person2 = [<span class="built_in">NSKeyedUnarchiver</span> unarchiverObjectWithData:data];</div><div class="line"><span class="comment">//3.分别打印内存地址</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"person1:0x%x"</span>, person1); <span class="comment">// person1:0x7177a60</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"person2:0x%x"</span>, person2); <span class="comment">// person2:0x7177cf0</span></div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6jw1f7l7boierrj20t003rt9o.jpg" alt=""></p>
<p>局限：一次性做读取和存储操作</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIScrollView轮播图(三个imageView)]]></title>
      <url>http://chenxiao90.com/2016/09/05/UIScrollView%E8%BD%AE%E6%92%AD%E5%9B%BE-%E4%B8%89%E4%B8%AAimageView/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>一共有3个imageView，初始化状态看到的是位于3个imageView中间的第一张图片，此时scrollView的contentOffsetX等于width，然后左边是最后一张图片，右边是第二张图片。如果用户向左滑动显示第二张图片，当第二张图片完全显示出来后，此时scrollView的contentOffsetX等于2*width，我们要做的第一件事就是将用户移动的位置进行复位，也就是让scrollView的contentOffsetX变回width，然后重新设置每个imageView应该显示的图片，因为代码执行速度很快，所以你意识不到它的切换。这样左边的imageView显示的是当前图片的上一张图片，右边的imageView显示的是当前图片的下一张图片，如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/801b780ajw1f7j256tk0gj214d0kkdkm.jpg" alt=""></p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="先自定义一个view继承自UIView，作为封装的轮播图类"><a href="#先自定义一个view继承自UIView，作为封装的轮播图类" class="headerlink" title="先自定义一个view继承自UIView，作为封装的轮播图类"></a>先自定义一个view继承自UIView，作为封装的轮播图类</h3><p><strong>CXInfiniteScrollView.m中</strong></p>
<p>（一）初始化添加子控件</p>
<ul>
<li>子控件包括：UIScrollView、UIPageControl、三个UIImageView</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UIImageView的个数</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSUInteger</span> <span class="keyword">const</span> CXImageViewCout = <span class="number">3</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 初始化：添加子控件</div><div class="line"> */</div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) &#123;</div><div class="line">        _scrollInterval = <span class="number">2.0</span>;</div><div class="line">        _animationInterval = <span class="number">1.0</span>;</div><div class="line">        <span class="comment">//添加scrollView对象</span></div><div class="line">        <span class="built_in">UIScrollView</span> *scrollView = [[<span class="built_in">UIScrollView</span> alloc] init];</div><div class="line">        scrollView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        scrollView.showsHorizontalScrollIndicator = <span class="literal">NO</span>;</div><div class="line">        scrollView.showsVerticalScrollIndicator = <span class="literal">NO</span>;</div><div class="line">        scrollView.pagingEnabled = <span class="literal">YES</span>;</div><div class="line">        scrollView.delegate = <span class="keyword">self</span>;</div><div class="line">        scrollView.bounces = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span> addSubview:scrollView];</div><div class="line">        <span class="keyword">self</span>.scrollView = scrollView;</div><div class="line">        </div><div class="line">        <span class="comment">//添加3个UIImageView对象</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">            <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] init];</div><div class="line">            imageView.contentMode = <span class="built_in">UIViewContentModeScaleToFill</span>;</div><div class="line">            [scrollView addSubview:imageView];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//添加pageControl对象</span></div><div class="line">        <span class="built_in">UIPageControl</span> *pageControl = [[<span class="built_in">UIPageControl</span> alloc] init];</div><div class="line">        [<span class="keyword">self</span> addSubview:pageControl];</div><div class="line">        pageControl.currentPageIndicatorTintColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">        <span class="keyword">self</span>.pageControl = pageControl;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（二）布局子控件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 布局子控件</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)layoutSubviews</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> layoutSubviews];</div><div class="line">    </div><div class="line">    <span class="comment">//scrollView</span></div><div class="line">    <span class="keyword">self</span>.scrollView.frame = <span class="keyword">self</span>.bounds;</div><div class="line">    </div><div class="line">    <span class="comment">//pageControl</span></div><div class="line">    <span class="built_in">CGSize</span> pageSize = [<span class="keyword">self</span>.pageControl sizeForNumberOfPages:_imageNames.count];</div><div class="line">    <span class="built_in">CGFloat</span> pageControlX = (<span class="keyword">self</span>.bounds.size.width - pageSize.width) / <span class="number">2</span>;</div><div class="line">    <span class="built_in">CGFloat</span> pageControlY = <span class="keyword">self</span>.bounds.size.height - pageSize.height;</div><div class="line">    <span class="keyword">self</span>.pageControl.frame = <span class="built_in">CGRectMake</span>(pageControlX, pageControlY, pageSize.width, pageSize.height);</div><div class="line">    </div><div class="line">    <span class="comment">//imageView</span></div><div class="line">    <span class="built_in">CGFloat</span> imageW = <span class="keyword">self</span>.scrollView.frame.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> imageH = <span class="keyword">self</span>.scrollView.frame.size.height;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        imageView.frame = <span class="built_in">CGRectMake</span>(i * imageW, <span class="number">0</span>, imageW, imageH);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(imageW, <span class="number">0</span>);</div><div class="line">    <span class="keyword">self</span>.scrollView.contentSize = <span class="built_in">CGSizeMake</span>(imageW * CXImageViewCout, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（三）属性的set方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 根据传入的图片数组设置图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setImageNames:(<span class="built_in">NSArray</span> *)imageNames</div><div class="line">&#123;</div><div class="line">    _imageNames = imageNames;</div><div class="line">    <span class="keyword">self</span>.pageControl.numberOfPages = imageNames.count;</div><div class="line">    <span class="comment">//更新UIImageView内容</span></div><div class="line">    [<span class="keyword">self</span> updateContent];</div><div class="line">    <span class="comment">//开启定时器</span></div><div class="line">    [<span class="keyword">self</span> startTimer];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：要在该方法中更新UIImageView内容，意思是获取到图片后接着更新UIImageView，之前在别的地方调用的updateContent，导致scrollView老是等好几秒才显示网络图片，弄了好久才发现是这的问题</strong></p>
</blockquote>
<p>（四）设置UIImageView的内容</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 更新UIImageView内容</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)updateContent</div><div class="line">&#123;</div><div class="line">    <span class="comment">//从左到右重新设置每个imageView的图片内容</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        </div><div class="line">        <span class="comment">//为了设置imageView对应的图片索引</span></div><div class="line">        <span class="built_in">NSInteger</span> imageIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">//最左边的imageView</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123; <span class="comment">//最右边的imageView</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            imageIndex = <span class="keyword">self</span>.pageControl.currentPage;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//无限循环的处理</span></div><div class="line">        <span class="keyword">if</span> (imageIndex == <span class="number">-1</span>) &#123; <span class="comment">//当上面的imageIndex为0时，如果再向右拖动，左侧图片显示，应该让它显示为最后一张图片</span></div><div class="line">            imageIndex = <span class="keyword">self</span>.imageNames.count - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imageIndex == <span class="keyword">self</span>.imageNames.count) &#123; <span class="comment">//当上面的imageIndex超过最大图片数量时，也就是滑到最右再继续滑动的时候，让它显示第一张图片</span></div><div class="line">            imageIndex = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//判断是URL还是本地图片</span></div><div class="line">        <span class="built_in">NSString</span> *imageName = <span class="keyword">self</span>.imageNames[imageIndex];</div><div class="line">        <span class="keyword">if</span> (imageName) &#123;</div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> verifyURL:imageName]) &#123;</div><div class="line">                <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:imageName];</div><div class="line">                [imageView sd_setImageWithURL:url];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                imageView.image = [<span class="built_in">UIImage</span> imageNamed:imageName];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//绑定图片索引到imageView的tag</span></div><div class="line">        imageView.tag = imageIndex;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//scrollView的contentOffset（偏移量归位）</span></div><div class="line">    <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.scrollView.frame.size.width, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 判断是否是URL</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)verifyURL:(<span class="built_in">NSString</span> *)url</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *pattern = <span class="string">@"((http|ftp|https)://)(([a-zA-Z0-9\\._-]+\\.[a-zA-Z]&#123;2,6&#125;)|([0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;))(:[0-9]&#123;1,4&#125;)*(/[a-zA-Z0-9\\&amp;%_\\./-~-]*)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *p = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, pattern];</div><div class="line">    <span class="built_in">BOOL</span> isMatch = [p evaluateWithObject:url];</div><div class="line">    <span class="keyword">return</span> isMatch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（五）scrollView代理方法的设置</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽的时候</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    <span class="comment">//拖动的时候，哪张图片最靠中间，也就是偏移量最小，就滑到哪页</span></div><div class="line">    <span class="comment">// imageView的x 和 scrollView偏移量x 的最小差值</span></div><div class="line">    <span class="built_in">CGFloat</span> minDelta = MAXFLOAT; <span class="comment">//MAXFLOAT:最大浮点数</span></div><div class="line">    </div><div class="line">    <span class="comment">// 找出显示在最中间的图片索引</span></div><div class="line">    <span class="built_in">NSInteger</span> centerImageIndex = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; CXImageViewCout; i++) &#123;</div><div class="line">        <span class="built_in">UIImageView</span> *imageView = <span class="keyword">self</span>.scrollView.subviews[i];</div><div class="line">        </div><div class="line">        <span class="comment">// ABS : 取得绝对值</span></div><div class="line">        <span class="built_in">CGFloat</span> delta = ABS(imageView.frame.origin.x - <span class="keyword">self</span>.scrollView.contentOffset.x);</div><div class="line">        <span class="keyword">if</span> (delta &lt; minDelta) &#123;</div><div class="line">            minDelta = delta;</div><div class="line">            centerImageIndex = imageView.tag;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置页码</span></div><div class="line">    <span class="keyword">self</span>.pageControl.currentPage = centerImageIndex;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽开始时停止定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewWillBeginDragging:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> stopTimer];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 拖拽结束时开启定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> startTimer];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 减速停止的时候更新图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> updateContent];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（六）设置定时器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 开启定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)startTimer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_timer) &#123;</div><div class="line">        _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:_scrollInterval target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(nextPage) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 停止定时器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)stopTimer</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="comment">//计时器被系统强引用，必须手动释放</span></div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 显示下一页</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)nextPage</div><div class="line">&#123;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:_animationInterval animations:^&#123;</div><div class="line">        <span class="keyword">self</span>.scrollView.contentOffset = <span class="built_in">CGPointMake</span>(<span class="number">2</span> * <span class="keyword">self</span>.scrollView.frame.size.width, <span class="number">0</span>);</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        <span class="comment">//更新视图</span></div><div class="line">        [<span class="keyword">self</span> updateContent];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（七）对外的接口</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CXInfiniteScrollView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *imageNames;</div><div class="line"><span class="comment">/** 切换图片的时间间隔 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> scrollInterval;</div><div class="line"><span class="comment">/** 切换图片动画的时长 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> animationInterval;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>（八）外界调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">NSArray</span> *images = @[<span class="string">@"001.jpg"</span>, <span class="string">@"002.jpg"</span>, <span class="string">@"003.jpg"</span>, <span class="string">@"004.jpg"</span>];</div><div class="line">    CXInfiniteScrollView *scroll = [[CXInfiniteScrollView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">375</span>, <span class="number">200</span>)];</div><div class="line">        scroll.imageNames = images;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:scroll];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>后续将添加imageView的点击事件、标题label、图片缓存等</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最简单的在OS X系统下制作gif动态图]]></title>
      <url>http://chenxiao90.com/2016/09/05/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%A8OS-X%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%88%B6%E4%BD%9Cgif%E5%8A%A8%E6%80%81%E5%9B%BE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="所需软件："><a href="#所需软件：" class="headerlink" title="所需软件："></a>所需软件：</h3><ul>
<li>licecap ： <a href="http://www.pc6.com/mac/135257.html" target="_blank" rel="external">点击下载</a></li>
</ul>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1.打开licecap</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7ix5imlshj20go0c8wfs.jpg" alt=""></p>
<p>2.调整大小后点击开始，会弹出设置框，点击save，就开始录制了</p>
<p><img src="http://ww3.sinaimg.cn/large/801b780ajw1f7ix6khxbej20i00bxta2.jpg" alt=""></p>
<p>3.点击stop结束录制，即可查看</p>
<p><img src="http://ww2.sinaimg.cn/large/801b780ajw1f7ix8iin13g20ae05je83.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://chenxiao90.com/2016/08/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
